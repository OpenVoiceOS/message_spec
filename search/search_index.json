{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Messages Specification This documentation contains all 'Message's expected by the various OpenVoiceOS components","title":"Messages Specification"},{"location":"#messages-specification","text":"This documentation contains all 'Message's expected by the various OpenVoiceOS components","title":"Messages Specification"},{"location":"PHAL_alsa/","text":"PHAL ALSA Listens to Message Type Message Data Description Emitted Response Type Handled by mycroft.volume.get Requests the current volume level. mycroft.volume.get.response handle_volume_request mycroft.volume.set 'percent': float 'play_sound': bool Sets the volume level. mycroft.audio.play_sound mycroft.volume.get.response handle_volume_change mycroft.volume.increase 'percent': float 'play_sound': bool Increases the volume level. mycroft.audio.play_sound mycroft.volume.get.response handle_volume_increase mycroft.volume.decrease 'percent': float 'play_sound': bool Decreases the volume level. mycroft.audio.play_sound mycroft.volume.get.response handle_volume_decrease mycroft.volume.mute Mutes the audio. mycroft.volume.get.response handle_mute_request mycroft.volume.unmute Unmutes the audio. mycroft.volume.get.response handle_unmute_request mycroft.volume.mute.toggle Toggles between mute and unmute. mycroft.volume.get.response handle_mute_toggle_request Emits Message Type Message Data Description Emitted by / In response to mycroft.audio.play_sound 'uri': 'snd/blop-mark-diangelo.wav' Plays a sound indicating a volume change. set_volume mycroft.volume.get.response 'percent': float 'muted': bool Reports current volume mycroft.volume.get","title":"PHAL ALSA"},{"location":"PHAL_alsa/#phal-alsa","text":"","title":"PHAL ALSA"},{"location":"PHAL_alsa/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled by mycroft.volume.get Requests the current volume level. mycroft.volume.get.response handle_volume_request mycroft.volume.set 'percent': float 'play_sound': bool Sets the volume level. mycroft.audio.play_sound mycroft.volume.get.response handle_volume_change mycroft.volume.increase 'percent': float 'play_sound': bool Increases the volume level. mycroft.audio.play_sound mycroft.volume.get.response handle_volume_increase mycroft.volume.decrease 'percent': float 'play_sound': bool Decreases the volume level. mycroft.audio.play_sound mycroft.volume.get.response handle_volume_decrease mycroft.volume.mute Mutes the audio. mycroft.volume.get.response handle_mute_request mycroft.volume.unmute Unmutes the audio. mycroft.volume.get.response handle_unmute_request mycroft.volume.mute.toggle Toggles between mute and unmute. mycroft.volume.get.response handle_mute_toggle_request","title":"Listens to"},{"location":"PHAL_alsa/#emits","text":"Message Type Message Data Description Emitted by / In response to mycroft.audio.play_sound 'uri': 'snd/blop-mark-diangelo.wav' Plays a sound indicating a volume change. set_volume mycroft.volume.get.response 'percent': float 'muted': bool Reports current volume mycroft.volume.get","title":"Emits"},{"location":"PHAL_nm/","text":"PHAL Network Manager Listens To Message Type Message Data Description Response Type Handled By ovos.phal.nm.scan Allows client to request for a network scan ovos.phal.nm.scan.complete handle_network_scan_request ovos.phal.nm.connect \"connection_name\": str \"password\": str \"security_type\": str Allows clients to connect to a given network ovos.phal.nm.connection.successful ovos.phal.nm.connection.failure handle_network_connect_request ovos.phal.nm.connect.open.network \"connection_name\": str Allows clients to connect to an open network ovos.phal.nm.connection.successful ovos.phal.nm.connection.failure handle_open_network_connect_request ovos.phal.nm.reconnect \"connection_name\": str Allows clients to reconnect to a network ovos.phal.nm.connection.successful ovos.phal.nm.connection.failure handle_network_reconnect_request ovos.phal.nm.disconnect \"connection_name\": str Allows clients to disconnect from a network ovos.phal.nm.disconnection.successful ovos.phal.nm.disconnection.failure handle_network_disconnect_request ovos.phal.nm.forget \"connection_name\": str Allows a client to forget a network ovos.phal.nm.forget.successful ovos.phal.nm.forget.failure handle_network_forget_request ovos.phal.nm.get.connected Allows querying if connected to a network ovos.phal.nm.is.connected ovos.phal.nm.is.not.connected handle_network_connected_query Emits Message Type Message Data Description Trigger Message Type ovos.phal.nm.scan.complete \"networks\": [{\"ssid\": str, \"security\": str}] Emitted when the requested scan is completed with a network list ovos.phal.nm.scan ovos.phal.nm.connection.successful \"connection_name\": str Emitted when a connection is successfully established ovos.phal.nm.connect ovos.phal.nm.reconnect ovos.phal.nm.connect.open.network ovos.phal.nm.connection.failure \"errorCode\": int \"errorMessage\": str Emitted when a connection fails to establish ovos.phal.nm.connect ovos.phal.nm.reconnect ovos.phal.nm.connect.open.network ovos.phal.nm.disconnection.successful \"connection_name\": str Emitted when a connection successfully disconnects ovos.phal.nm.disconnect ovos.phal.nm.disconnection.failure Emitted when a connection fails to disconnect ovos.phal.nm.disconnect ovos.phal.nm.forget.successful \"connection_name\": str Emitted when a connection successfully is forgotten ovos.phal.nm.forget ovos.phal.nm.forget.failure Emitted when a connection fails to forget ovos.phal.nm.forget ovos.phal.nm.is.connected \"connection_name\": str Emitted when the query indicates connection ovos.phal.nm.get.connected ovos.phal.nm.is.not.connected Emitted when the query indicates no connection ovos.phal.nm.get.connected","title":"PHAL Network Manager"},{"location":"PHAL_nm/#phal-network-manager","text":"","title":"PHAL Network Manager"},{"location":"PHAL_nm/#listens-to","text":"Message Type Message Data Description Response Type Handled By ovos.phal.nm.scan Allows client to request for a network scan ovos.phal.nm.scan.complete handle_network_scan_request ovos.phal.nm.connect \"connection_name\": str \"password\": str \"security_type\": str Allows clients to connect to a given network ovos.phal.nm.connection.successful ovos.phal.nm.connection.failure handle_network_connect_request ovos.phal.nm.connect.open.network \"connection_name\": str Allows clients to connect to an open network ovos.phal.nm.connection.successful ovos.phal.nm.connection.failure handle_open_network_connect_request ovos.phal.nm.reconnect \"connection_name\": str Allows clients to reconnect to a network ovos.phal.nm.connection.successful ovos.phal.nm.connection.failure handle_network_reconnect_request ovos.phal.nm.disconnect \"connection_name\": str Allows clients to disconnect from a network ovos.phal.nm.disconnection.successful ovos.phal.nm.disconnection.failure handle_network_disconnect_request ovos.phal.nm.forget \"connection_name\": str Allows a client to forget a network ovos.phal.nm.forget.successful ovos.phal.nm.forget.failure handle_network_forget_request ovos.phal.nm.get.connected Allows querying if connected to a network ovos.phal.nm.is.connected ovos.phal.nm.is.not.connected handle_network_connected_query","title":"Listens To"},{"location":"PHAL_nm/#emits","text":"Message Type Message Data Description Trigger Message Type ovos.phal.nm.scan.complete \"networks\": [{\"ssid\": str, \"security\": str}] Emitted when the requested scan is completed with a network list ovos.phal.nm.scan ovos.phal.nm.connection.successful \"connection_name\": str Emitted when a connection is successfully established ovos.phal.nm.connect ovos.phal.nm.reconnect ovos.phal.nm.connect.open.network ovos.phal.nm.connection.failure \"errorCode\": int \"errorMessage\": str Emitted when a connection fails to establish ovos.phal.nm.connect ovos.phal.nm.reconnect ovos.phal.nm.connect.open.network ovos.phal.nm.disconnection.successful \"connection_name\": str Emitted when a connection successfully disconnects ovos.phal.nm.disconnect ovos.phal.nm.disconnection.failure Emitted when a connection fails to disconnect ovos.phal.nm.disconnect ovos.phal.nm.forget.successful \"connection_name\": str Emitted when a connection successfully is forgotten ovos.phal.nm.forget ovos.phal.nm.forget.failure Emitted when a connection fails to forget ovos.phal.nm.forget ovos.phal.nm.is.connected \"connection_name\": str Emitted when the query indicates connection ovos.phal.nm.get.connected ovos.phal.nm.is.not.connected Emitted when the query indicates no connection ovos.phal.nm.get.connected","title":"Emits"},{"location":"PHAL_oauth/","text":"PHAL OAuth Listens To Message Type Message Data Description Emitted Response Type Handled By oauth.register \"skill_id\": str \"app_id\": str \"auth_endpoint\": str \"token_endpoint\": str \"refresh_endpoint\": str \"scope\": str \"client_id\": str \"client_secret\": str \"shell_integration\": bool Register OAuth credentials for a skill's app. handle_oauth_register oauth.start \"skill_id\": str \"app_id\": str Start the OAuth authentication process. handle_start_oauth oauth.get \"skill_id\": str \"app_id\": str Get the OAuth authentication URL. oauth.url handle_get_auth_url ovos.shell.oauth.register.credentials \"skill_id\": str \"app_id\": str \"client_id\": str \"client_secret\": str Register OAuth credentials from the shell. handle_client_secret oauth.get.app.host.info Get information about the app's host (IP and port). oauth.app.host.info.response handle_get_app_host_info oauth.generate.qr.request \"skill_id\": str \"app_id\": str Request the generation of a QR code for OAuth authentication. oauth.generate.qr.response handle_generate_qr Emits Message Type Message Data Description Trigger Message Type oauth.token.response.{munged_id} token_response: dict Notify registered apps/skills about OAuth token response. oauth.url \"url\": str Reply containing the OAuth authentication URL. oauth.get ovos.shell.oauth.start.authentication \"url\": str \"skill_id\": str \"app_id\": str \"needs_credentials\": bool Start the OAuth authentication process from the shell. oauth.app.host.info.response \"host\": str \"port\": int Reply containing information about the app's host (IP and port). oauth.get.app.host.info oauth.generate.qr.response \"skill_id\": str \"app_id\": str \"qr\": str Reply containing the generated QR code for OAuth authentication. oauth.generate.qr.request ovos.shell.oauth.display.qr.code \"skill_id\": str \"app_id\": str \"qr\": str Display the OAuth QR code in the shell. oauth.generate.qr.response","title":"PHAL OAuth"},{"location":"PHAL_oauth/#phal-oauth","text":"","title":"PHAL OAuth"},{"location":"PHAL_oauth/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled By oauth.register \"skill_id\": str \"app_id\": str \"auth_endpoint\": str \"token_endpoint\": str \"refresh_endpoint\": str \"scope\": str \"client_id\": str \"client_secret\": str \"shell_integration\": bool Register OAuth credentials for a skill's app. handle_oauth_register oauth.start \"skill_id\": str \"app_id\": str Start the OAuth authentication process. handle_start_oauth oauth.get \"skill_id\": str \"app_id\": str Get the OAuth authentication URL. oauth.url handle_get_auth_url ovos.shell.oauth.register.credentials \"skill_id\": str \"app_id\": str \"client_id\": str \"client_secret\": str Register OAuth credentials from the shell. handle_client_secret oauth.get.app.host.info Get information about the app's host (IP and port). oauth.app.host.info.response handle_get_app_host_info oauth.generate.qr.request \"skill_id\": str \"app_id\": str Request the generation of a QR code for OAuth authentication. oauth.generate.qr.response handle_generate_qr","title":"Listens To"},{"location":"PHAL_oauth/#emits","text":"Message Type Message Data Description Trigger Message Type oauth.token.response.{munged_id} token_response: dict Notify registered apps/skills about OAuth token response. oauth.url \"url\": str Reply containing the OAuth authentication URL. oauth.get ovos.shell.oauth.start.authentication \"url\": str \"skill_id\": str \"app_id\": str \"needs_credentials\": bool Start the OAuth authentication process from the shell. oauth.app.host.info.response \"host\": str \"port\": int Reply containing information about the app's host (IP and port). oauth.get.app.host.info oauth.generate.qr.response \"skill_id\": str \"app_id\": str \"qr\": str Reply containing the generated QR code for OAuth authentication. oauth.generate.qr.request ovos.shell.oauth.display.qr.code \"skill_id\": str \"app_id\": str \"qr\": str Display the OAuth QR code in the shell. oauth.generate.qr.response","title":"Emits"},{"location":"dinkum/","text":"ovos-dinkum-listener OVOSDinkumVoiceService Listens to Message Type Message Data Description Response Type(s) mycroft.mic.mute Produces empty audio stream mycroft.mic.unmute Uses real audio stream mycroft.mic.listen Wakes up OVOS and starts recording voice command recognizer_loop:audio_output_start Audio output started recognizer_loop:audio_output_end Audio output ended mycroft.stop Handler for OVOS.stop, i.e. button press recognizer_loop:sleep Put the voice loop to sleep recognizer_loop:wake_up Wake up the voice loop mycroft.awoken recognizer_loop:record_stop Stop current recording session recognizer_loop:state.set \"state\": str \"mode\": str Set listening state and mode recognizer_loop:state.get Query listening state recognizer_loop:state intent.service.skills.activated When a skill is activated, reset the timeout until wakeword is needed again (only used when in hybrid listening mode) ovos.languages.stt Handle a request for supported STT languages ovos.languages.stt.response opm.stt.query Query supported STT languages and plugins opm.stt.query.response opm.ww.query Query supported wake word languages and plugins opm.ww.query.response opm.vad.query Query supported VAD plugins and options opm.vad.query.response Emits Message Type Message Data Description In Response to recognizer_loop:record_begin Reports that voice command recording has begun mycroft.mic.listen recognizer_loop:wakeword \"utterance\": str \"lang\": str Reports wake word used to wake up OVOS recognizer_loop:hotword \"utterance\": str \"lang\": str Reports hotword used to wake up OVOS recognizer_loop:stopword \"utterance\": str \"lang\": str Reports stop word used to end recording recognizer_loop:wakeupword \"utterance\": str \"lang\": str Reports wake-up word used to wake up OVOS recognizer_loop:record_end Reports that voice command recording has ended recognizer_loop:utterance \"utterances\": List[str] \"lang\": str Result from speech to text of voice command recognizer_loop:speech.recognition.unknown Sent when empty result from speech to text is returned mycroft.audio.play_sound \"uri\": str Play a sound mycroft.awoken Notify that OVOS is awake recognizer_loop:wake_up recognizer_loop:state \"mode\": str \"state\": str Query listening state recognizer_loop:state.get ovos.languages.stt.response \"langs\": List[str] Response for supported STT languages ovos.languages.stt opm.stt.query.response \"langs\": List \"plugins\": List \"configs\": List \"options\": List Response for supported STT plugins and options opm.stt.query opm.ww.query.response \"langs\": List \"plugins\": List \"configs\": List \"options\": List Response for supported wake word plugins and options opm.ww.query opm.vad.query.response \"plugins\": List \"configs\": List \"options\": List Response for supported VAD plugins and options opm.vad.query mycroft.mic.get_status.response \"muted\": bool Report mic mute status (OVOS software side) mycroft.mic.get_status","title":"Listener"},{"location":"dinkum/#ovos-dinkum-listener","text":"","title":"ovos-dinkum-listener"},{"location":"dinkum/#ovosdinkumvoiceservice","text":"","title":"OVOSDinkumVoiceService"},{"location":"dinkum/#listens-to","text":"Message Type Message Data Description Response Type(s) mycroft.mic.mute Produces empty audio stream mycroft.mic.unmute Uses real audio stream mycroft.mic.listen Wakes up OVOS and starts recording voice command recognizer_loop:audio_output_start Audio output started recognizer_loop:audio_output_end Audio output ended mycroft.stop Handler for OVOS.stop, i.e. button press recognizer_loop:sleep Put the voice loop to sleep recognizer_loop:wake_up Wake up the voice loop mycroft.awoken recognizer_loop:record_stop Stop current recording session recognizer_loop:state.set \"state\": str \"mode\": str Set listening state and mode recognizer_loop:state.get Query listening state recognizer_loop:state intent.service.skills.activated When a skill is activated, reset the timeout until wakeword is needed again (only used when in hybrid listening mode) ovos.languages.stt Handle a request for supported STT languages ovos.languages.stt.response opm.stt.query Query supported STT languages and plugins opm.stt.query.response opm.ww.query Query supported wake word languages and plugins opm.ww.query.response opm.vad.query Query supported VAD plugins and options opm.vad.query.response","title":"Listens to"},{"location":"dinkum/#emits","text":"Message Type Message Data Description In Response to recognizer_loop:record_begin Reports that voice command recording has begun mycroft.mic.listen recognizer_loop:wakeword \"utterance\": str \"lang\": str Reports wake word used to wake up OVOS recognizer_loop:hotword \"utterance\": str \"lang\": str Reports hotword used to wake up OVOS recognizer_loop:stopword \"utterance\": str \"lang\": str Reports stop word used to end recording recognizer_loop:wakeupword \"utterance\": str \"lang\": str Reports wake-up word used to wake up OVOS recognizer_loop:record_end Reports that voice command recording has ended recognizer_loop:utterance \"utterances\": List[str] \"lang\": str Result from speech to text of voice command recognizer_loop:speech.recognition.unknown Sent when empty result from speech to text is returned mycroft.audio.play_sound \"uri\": str Play a sound mycroft.awoken Notify that OVOS is awake recognizer_loop:wake_up recognizer_loop:state \"mode\": str \"state\": str Query listening state recognizer_loop:state.get ovos.languages.stt.response \"langs\": List[str] Response for supported STT languages ovos.languages.stt opm.stt.query.response \"langs\": List \"plugins\": List \"configs\": List \"options\": List Response for supported STT plugins and options opm.stt.query opm.ww.query.response \"langs\": List \"plugins\": List \"configs\": List \"options\": List Response for supported wake word plugins and options opm.ww.query opm.vad.query.response \"plugins\": List \"configs\": List \"options\": List Response for supported VAD plugins and options opm.vad.query mycroft.mic.get_status.response \"muted\": bool Report mic mute status (OVOS software side) mycroft.mic.get_status","title":"Emits"},{"location":"ggwave/","text":"OVOS GGWave GGWave is a audio transformer plugin, it consumes the microphone feed Listens to Message Type Message Data Description Emitted Response Type Handled By ovos.ggwave.enable Enable GGWave functionality. ovos.ggwave.enabled handle_enable function ovos.ggwave.disable Disable GGWave functionality. ovos.ggwave.disabled handle_disable function Emits Message Type Message Data Description Trigger Message Type Handled By ovos.ggwave.enabled Notification that GGWave has been enabled. ovos.ggwave.enable handle_enable ovos.ggwave.disabled Notification that GGWave has been disabled. ovos.ggwave.disable handle_disable mycroft.audio.play_sound \"uri\": str Play an acknowledgment / error sound. ovos.skills.install \"url\": str Install a skill from the specified URL. handle_skill ovos.pip.install \"packages\":List[str] Install a pip package. handle_pip ovos.pip.uninstall \"packages\": List[str] Uninstall a pip package. handle_remove_pip recognizer_loop:utterance \"utterances\": List[str] Emit an utterance to the recognizer loop. handle_utt speak \"utterance\": str Speak the specified text. handle_speak ovos.phal.nm.connect.open.network \"connection_name\": str Connect to an open WiFi network. handle_wifi_pswd ovos.phal.nm.connect \"connection_name\": str \"password\": str Connect to a password-protected WiFi network. handle_wifi_pswd","title":"Audio GGWave"},{"location":"ggwave/#ovos-ggwave","text":"GGWave is a audio transformer plugin, it consumes the microphone feed","title":"OVOS GGWave"},{"location":"ggwave/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled By ovos.ggwave.enable Enable GGWave functionality. ovos.ggwave.enabled handle_enable function ovos.ggwave.disable Disable GGWave functionality. ovos.ggwave.disabled handle_disable function","title":"Listens to"},{"location":"ggwave/#emits","text":"Message Type Message Data Description Trigger Message Type Handled By ovos.ggwave.enabled Notification that GGWave has been enabled. ovos.ggwave.enable handle_enable ovos.ggwave.disabled Notification that GGWave has been disabled. ovos.ggwave.disable handle_disable mycroft.audio.play_sound \"uri\": str Play an acknowledgment / error sound. ovos.skills.install \"url\": str Install a skill from the specified URL. handle_skill ovos.pip.install \"packages\":List[str] Install a pip package. handle_pip ovos.pip.uninstall \"packages\": List[str] Uninstall a pip package. handle_remove_pip recognizer_loop:utterance \"utterances\": List[str] Emit an utterance to the recognizer loop. handle_utt speak \"utterance\": str Speak the specified text. handle_speak ovos.phal.nm.connect.open.network \"connection_name\": str Connect to an open WiFi network. handle_wifi_pswd ovos.phal.nm.connect \"connection_name\": str \"password\": str Connect to a password-protected WiFi network. handle_wifi_pswd","title":"Emits"},{"location":"gui/","text":"ovos-gui Homescreen Manager Extensions Manager Namespace Manager Homescreen Manager Listens To Message Type Message Data Description Response Type(s) homescreen.manager.add \"id\": str \"class\": str Add a homescreen to the manager. homescreen.manager.remove \"id\": str Remove a homescreen from the manager. homescreen.manager.list Request a list of loaded homescreens. homescreen.manager.list.response homescreen.manager.get_active Request the active homescreen. homescreen.manager.get_active.response homescreen.manager.set_active \"id\": str Change the configured homescreen. homescreen.manager.disable_active Disable the active homescreen. homescreen.manager.show_active Show the active homescreen. mycroft.ready Signal that OVOS is ready. homescreen.manager.show_active mycroft.mark2.register_idle DEPRECATED: Register an old-style homescreen. Emits Message Type Message Data Description In Response to homescreen.manager.reload.list Emit a request for homescreens to register. homescreen.manager.activate.display \"homescreen_id\": str Activate and display a homescreen. {active_homescreen_id}.idle DEPRECATED: Activate an old-style homescreen. mycroft.mark2.collect_idle DEPRECATED: Trigger collection of older resting screens. homescreen.manager.get_active.response \"homescreen\": str report the currently active homescreen homescreen.manager.get_active homescreen.manager.show_active Show the active homescreen. mycroft.ready homescreen.manager.list.response \"homescreens\": List[str] report list of loaded homescreens. homescreen.manager.list Extensions Manager Listens To Message Type Message Data Description Response Type(s) mycroft.gui.connected A GUI client app connected mycroft.gui.available Emits Message Type Message Data Description In Response to extension.manager.activated \"id\": str Reports the active GUI extension during initial loading mycroft.gui.available \"permanent\": bool signal GUI available to trigger resource file upload during initial loading / mycroft.gui.connected Namespace Manager Listens To Message Type Message Data Description Response Type(s) Handled by gui.clear.namespace remove a namespace. self.handle_clear_namespace gui.event.send send a message to the GUI message bus. self.handle_send_event gui.page.delete remove one or more pages from a namespace. self.handle_delete_page gui.page.show show one or more pages on the screen. self.handle_show_page gui.page.upload makes pages accessible via HTTP server, may be mounted to a volume in container setups homescreen.manager.show_active self.handle_receive_gui_pages gui.volunteer_page_upload skill or plugin advertising that it has GUI pages available to upload self.handle_gui_pages_available gui.status.request check if there are connected GUI client apps self.handle_status_request gui.value.set set the value of namespace data attributes. self.handle_set_value gui.page_interaction \"skill_id\": str a page has been interacted with. self.handle_page_interaction gui.page_gained_focus \"skill_id\": str GUI app indicating a page has gained focus self.handle_page_gained_focus mycroft.skills.trained Once all skills loaded, trigger a page upload self.handle_ready mycroft.gui.connected \"gui_id\": str \"framework\": str DEPRECATED: old gui clients connected to wrong bus self.handle_client_connected Emits Message Type Message Data Description In Response to homescreen.manager.show_active Configured home screen skill just uploaded pages, show it gui.page.upload gui.request_page_upload request pages for each connected GUI framework. gui.volunteer_page_upload / mycroft.gui.connected gui.status.request.response \"connected\": bool report if any GUI app is connected gui.status.request gui.namespace.displayed Message to notify core of changes. self._emit_namespace_displayed_event mycroft.gui.port \"port\": int \"gui_id\": str DEPRECATED: tell old gui clients what port the real gui websocket is mycroft.gui.connected","title":"GUI"},{"location":"gui/#ovos-gui","text":"Homescreen Manager Extensions Manager Namespace Manager","title":"ovos-gui"},{"location":"gui/#homescreen-manager","text":"","title":"Homescreen Manager"},{"location":"gui/#listens-to","text":"Message Type Message Data Description Response Type(s) homescreen.manager.add \"id\": str \"class\": str Add a homescreen to the manager. homescreen.manager.remove \"id\": str Remove a homescreen from the manager. homescreen.manager.list Request a list of loaded homescreens. homescreen.manager.list.response homescreen.manager.get_active Request the active homescreen. homescreen.manager.get_active.response homescreen.manager.set_active \"id\": str Change the configured homescreen. homescreen.manager.disable_active Disable the active homescreen. homescreen.manager.show_active Show the active homescreen. mycroft.ready Signal that OVOS is ready. homescreen.manager.show_active mycroft.mark2.register_idle DEPRECATED: Register an old-style homescreen.","title":"Listens To"},{"location":"gui/#emits","text":"Message Type Message Data Description In Response to homescreen.manager.reload.list Emit a request for homescreens to register. homescreen.manager.activate.display \"homescreen_id\": str Activate and display a homescreen. {active_homescreen_id}.idle DEPRECATED: Activate an old-style homescreen. mycroft.mark2.collect_idle DEPRECATED: Trigger collection of older resting screens. homescreen.manager.get_active.response \"homescreen\": str report the currently active homescreen homescreen.manager.get_active homescreen.manager.show_active Show the active homescreen. mycroft.ready homescreen.manager.list.response \"homescreens\": List[str] report list of loaded homescreens. homescreen.manager.list","title":"Emits"},{"location":"gui/#extensions-manager","text":"","title":"Extensions Manager"},{"location":"gui/#listens-to_1","text":"Message Type Message Data Description Response Type(s) mycroft.gui.connected A GUI client app connected mycroft.gui.available","title":"Listens To"},{"location":"gui/#emits_1","text":"Message Type Message Data Description In Response to extension.manager.activated \"id\": str Reports the active GUI extension during initial loading mycroft.gui.available \"permanent\": bool signal GUI available to trigger resource file upload during initial loading / mycroft.gui.connected","title":"Emits"},{"location":"gui/#namespace-manager","text":"","title":"Namespace Manager"},{"location":"gui/#listens-to_2","text":"Message Type Message Data Description Response Type(s) Handled by gui.clear.namespace remove a namespace. self.handle_clear_namespace gui.event.send send a message to the GUI message bus. self.handle_send_event gui.page.delete remove one or more pages from a namespace. self.handle_delete_page gui.page.show show one or more pages on the screen. self.handle_show_page gui.page.upload makes pages accessible via HTTP server, may be mounted to a volume in container setups homescreen.manager.show_active self.handle_receive_gui_pages gui.volunteer_page_upload skill or plugin advertising that it has GUI pages available to upload self.handle_gui_pages_available gui.status.request check if there are connected GUI client apps self.handle_status_request gui.value.set set the value of namespace data attributes. self.handle_set_value gui.page_interaction \"skill_id\": str a page has been interacted with. self.handle_page_interaction gui.page_gained_focus \"skill_id\": str GUI app indicating a page has gained focus self.handle_page_gained_focus mycroft.skills.trained Once all skills loaded, trigger a page upload self.handle_ready mycroft.gui.connected \"gui_id\": str \"framework\": str DEPRECATED: old gui clients connected to wrong bus self.handle_client_connected","title":"Listens To"},{"location":"gui/#emits_2","text":"Message Type Message Data Description In Response to homescreen.manager.show_active Configured home screen skill just uploaded pages, show it gui.page.upload gui.request_page_upload request pages for each connected GUI framework. gui.volunteer_page_upload / mycroft.gui.connected gui.status.request.response \"connected\": bool report if any GUI app is connected gui.status.request gui.namespace.displayed Message to notify core of changes. self._emit_namespace_displayed_event mycroft.gui.port \"port\": int \"gui_id\": str DEPRECATED: tell old gui clients what port the real gui websocket is mycroft.gui.connected","title":"Emits"},{"location":"gui_bigscreen/","text":"Plasma Bigscreen GUI Extension Provides window management for Plasma Bigscreen Listens to Message Type Message Data Description Emitted Response Type Handled by mycroft.gui.screen.close Closes the current skill window on Plasma Bigscreen screen.close.idle.event close_window_by_event mycroft.gui.force.screenclose 'skill_id': str Forces the closure of a specific skill window on Bigscreen screen.close.idle.event close_window_by_force gui.page.show 'page': str '__idle': bool Tracks the idle timeout / override idle flag for displayed pages on_gui_page_show gui.page_interaction 'skill_id': str Tracks the current skill displaying a page on_gui_page_interaction gui.namespace.removed 'skill_id': str Closes the window of the skill screen.close.idle.event close_current_window Emits Message Type Message Data Description Trigger Message Type Handled by screen.close.idle.event 'skill_idle_event_id': str Asks mycroft-gui to close the skill window gui.clear.namespace mycroft.gui.screen.close mycroft.gui.force.screenclose mycroft-gui","title":"Plasma Bigscreen"},{"location":"gui_bigscreen/#plasma-bigscreen-gui-extension","text":"Provides window management for Plasma Bigscreen","title":"Plasma Bigscreen GUI Extension"},{"location":"gui_bigscreen/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled by mycroft.gui.screen.close Closes the current skill window on Plasma Bigscreen screen.close.idle.event close_window_by_event mycroft.gui.force.screenclose 'skill_id': str Forces the closure of a specific skill window on Bigscreen screen.close.idle.event close_window_by_force gui.page.show 'page': str '__idle': bool Tracks the idle timeout / override idle flag for displayed pages on_gui_page_show gui.page_interaction 'skill_id': str Tracks the current skill displaying a page on_gui_page_interaction gui.namespace.removed 'skill_id': str Closes the window of the skill screen.close.idle.event close_current_window","title":"Listens to"},{"location":"gui_bigscreen/#emits","text":"Message Type Message Data Description Trigger Message Type Handled by screen.close.idle.event 'skill_idle_event_id': str Asks mycroft-gui to close the skill window gui.clear.namespace mycroft.gui.screen.close mycroft.gui.force.screenclose mycroft-gui","title":"Emits"},{"location":"gui_mobile/","text":"GUI on mobile extension Handles mycroft-gui running on android Listens to Message Type Message Data Description Emitted Response Type Handled by mycroft.gui.screen.close Forces the display of the home screen in the GUI. handle_show_homescreen mycroft.gui.forceHome Forces the display of the home screen in the GUI. handle_show_homescreen mycroft.gui.screen.request.page.back Handles a request to navigate back to previous GUI page. handle_page_back","title":"Mobile"},{"location":"gui_mobile/#gui-on-mobile-extension","text":"Handles mycroft-gui running on android","title":"GUI on mobile extension"},{"location":"gui_mobile/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled by mycroft.gui.screen.close Forces the display of the home screen in the GUI. handle_show_homescreen mycroft.gui.forceHome Forces the display of the home screen in the GUI. handle_show_homescreen mycroft.gui.screen.request.page.back Handles a request to navigate back to previous GUI page. handle_page_back","title":"Listens to"},{"location":"opm/","text":"ovos-plugin-manager GUIExtension PHALPlugin GUIExtension Listens to Message Type Message Data Description Response Type(s) Handled by mycroft.gui.screen.close \"skill_id\": str Handles the event to close the GUI screen in a skill. gui.clear.namespace self.handle_remove_namespace #Emits Message Type Message Data Description In Response to gui.clear.namespace \"__from\": str Clears a skill's namespace in the GUI. mycroft.gui.screen.close PHALPlugin Listens to Message Type Message Data Description Handled by recognizer_loop:record_begin Listening started on_record_begin recognizer_loop:record_end Listening ended on_record_end recognizer_loop:audio_output_start Speaking started on_audio_output_start recognizer_loop:audio_output_end Speaking started on_audio_output_end recognizer_loop:sleep On naptime animation on_sleep mycroft.awoken On wakeup animation on_awake speak On speak messages, intended for enclosures on_speak enclosure.notify.no_internet on_no_internet enclosure.reset The enclosure should restore itself to a started state. on_reset enclosure.system.reset The enclosure hardware should reset any CPUs, etc. on_system_reset enclosure.system.mute Mute (turn off) the system speaker. on_system_mute enclosure.system.unmute Unmute (turn on) the system speaker. on_system_unmute enclosure.system.blink The 'eyes' should blink the given number of times. on_system_blink enclosure.eyes.on Illuminate or show the eyes. on_eyes_on enclosure.eyes.off Turn off or hide the eyes. on_eyes_off enclosure.eyes.fill Fill the eyes on_eyes_fill enclosure.eyes.blink \"side\": str Make the eyes blink on_eyes_blink enclosure.eyes.narrow Make the eyes look narrow, like a squint on_eyes_narrow enclosure.eyes.look \"side\": str Make the eyes look to the given side on_eyes_look enclosure.eyes.color \"r\": int \"g\": int \"b\": int Change the eye color to the given RGB color on_eyes_color enclosure.eyes.brightness \"level\": int Set the brightness of the eyes in the display on_eyes_brightness enclosure.eyes.volume \"volume\": int Indicate the volume using the eyes on_eyes_volume enclosure.eyes.spin on_eyes_spin enclosure.eyes.timedspin \"length\": int Make the eyes 'roll' for the given time on_eyes_timed_spin enclosure.eyes.setpixel Set pixel on the eyes on_eyes_set_pixel enclosure.eyes.reset Restore the eyes to their default (ready) state. on_eyes_reset enclosure.mouth.events.activate Enable movement of the mouth with speech _activate_mouth_events enclosure.mouth.events.deactivate Disable movement of the mouth with speech _deactivate_mouth_events enclosure.mouth.reset reset mouth to default state on_display_reset enclosure.mouth.talk Show a generic 'talking' animation for non-synched speech on_talk enclosure.mouth.think Show a 'thinking' image or animation on_think enclosure.mouth.listen Show a 'thinking' image or animation on_listen enclosure.mouth.smile Show a 'smile' image or animation on_smile enclosure.mouth.viseme \"code\": int Display a viseme mouth shape for synched speech on_viseme enclosure.mouth.viseme_list \"start\": int \"viseme_pairs\": List[Tuple[int, int]] Mouth visemes as a list in a single message on_viseme_list enclosure.mouth.text \"text\": str Display text (scrolling as needed) on_text enclosure.mouth.display \"img_code\": str \"x\": int \"y\": int \"refresh\": bool Display images on faceplate. Currently supports images up to 16x8, or half the face. on_display enclosure.weather.display \"img_code\": char \"temp\": int Show a the temperature and a weather icon on_weather_display","title":"OPM"},{"location":"opm/#ovos-plugin-manager","text":"GUIExtension PHALPlugin","title":"ovos-plugin-manager"},{"location":"opm/#guiextension","text":"","title":"GUIExtension"},{"location":"opm/#listens-to","text":"Message Type Message Data Description Response Type(s) Handled by mycroft.gui.screen.close \"skill_id\": str Handles the event to close the GUI screen in a skill. gui.clear.namespace self.handle_remove_namespace","title":"Listens to"},{"location":"opm/#emits","text":"Message Type Message Data Description In Response to gui.clear.namespace \"__from\": str Clears a skill's namespace in the GUI. mycroft.gui.screen.close","title":"#Emits"},{"location":"opm/#phalplugin","text":"","title":"PHALPlugin"},{"location":"opm/#listens-to_1","text":"Message Type Message Data Description Handled by recognizer_loop:record_begin Listening started on_record_begin recognizer_loop:record_end Listening ended on_record_end recognizer_loop:audio_output_start Speaking started on_audio_output_start recognizer_loop:audio_output_end Speaking started on_audio_output_end recognizer_loop:sleep On naptime animation on_sleep mycroft.awoken On wakeup animation on_awake speak On speak messages, intended for enclosures on_speak enclosure.notify.no_internet on_no_internet enclosure.reset The enclosure should restore itself to a started state. on_reset enclosure.system.reset The enclosure hardware should reset any CPUs, etc. on_system_reset enclosure.system.mute Mute (turn off) the system speaker. on_system_mute enclosure.system.unmute Unmute (turn on) the system speaker. on_system_unmute enclosure.system.blink The 'eyes' should blink the given number of times. on_system_blink enclosure.eyes.on Illuminate or show the eyes. on_eyes_on enclosure.eyes.off Turn off or hide the eyes. on_eyes_off enclosure.eyes.fill Fill the eyes on_eyes_fill enclosure.eyes.blink \"side\": str Make the eyes blink on_eyes_blink enclosure.eyes.narrow Make the eyes look narrow, like a squint on_eyes_narrow enclosure.eyes.look \"side\": str Make the eyes look to the given side on_eyes_look enclosure.eyes.color \"r\": int \"g\": int \"b\": int Change the eye color to the given RGB color on_eyes_color enclosure.eyes.brightness \"level\": int Set the brightness of the eyes in the display on_eyes_brightness enclosure.eyes.volume \"volume\": int Indicate the volume using the eyes on_eyes_volume enclosure.eyes.spin on_eyes_spin enclosure.eyes.timedspin \"length\": int Make the eyes 'roll' for the given time on_eyes_timed_spin enclosure.eyes.setpixel Set pixel on the eyes on_eyes_set_pixel enclosure.eyes.reset Restore the eyes to their default (ready) state. on_eyes_reset enclosure.mouth.events.activate Enable movement of the mouth with speech _activate_mouth_events enclosure.mouth.events.deactivate Disable movement of the mouth with speech _deactivate_mouth_events enclosure.mouth.reset reset mouth to default state on_display_reset enclosure.mouth.talk Show a generic 'talking' animation for non-synched speech on_talk enclosure.mouth.think Show a 'thinking' image or animation on_think enclosure.mouth.listen Show a 'thinking' image or animation on_listen enclosure.mouth.smile Show a 'smile' image or animation on_smile enclosure.mouth.viseme \"code\": int Display a viseme mouth shape for synched speech on_viseme enclosure.mouth.viseme_list \"start\": int \"viseme_pairs\": List[Tuple[int, int]] Mouth visemes as a list in a single message on_viseme_list enclosure.mouth.text \"text\": str Display text (scrolling as needed) on_text enclosure.mouth.display \"img_code\": str \"x\": int \"y\": int \"refresh\": bool Display images on faceplate. Currently supports images up to 16x8, or half the face. on_display enclosure.weather.display \"img_code\": char \"temp\": int Show a the temperature and a weather icon on_weather_display","title":"Listens to"},{"location":"ovos_PHAL_plugin_system/","text":"PHAL System Listens to Message Type Message Data Description Emitted Response Type Handled By system.ntp.sync \"display\": bool Requests synchronization of the system clock handle_ntp_sync_request system.ssh.status Checks SSH service status and emits a response handle_ssh_status system.ssh.enable \"display\": bool Requests enabling the SSH service handle_ssh_enable_request system.ssh.disable \"display\": bool Requests disabling the SSH service handle_ssh_disable_request system.reboot \"display\": bool Requests a system reboot handle_reboot_request system.shutdown \"display\": bool Requests a system shutdown handle_shutdown_request system.factory.reset \"wipe_cache\": bool \"wipe_data\":bool \"wipe_logs\":bool \"wipe_configs\":bool \"reset_hardware\":bool \"script\":bool \"reboot\":bool Requests a factory reset of the system handle_factory_reset_request system.factory.reset.register \"skill_id\": str Registers a hardware specific factory reset handler handle_reset_register system.configure.language \"language_code\": str \"display\": bool Requests global language configuration system.configure.language.complete handle_configure_language_request system.mycroft.service.restart \"display\": bool Requests a restart of the Mycroft service handle_mycroft_restart_request system.factory.reset.phal.complete \"skill_id\": str Indicates completion of PHAL-based factory reset system.factory.reset.phal handle_factory_reset_request Emits Message Type Message Data Description Trigger Message Type Emitted by system.ntp.sync.complete Indicates completion of NTP synchronization system.ntp.sync handle_ntp_sync_request system.ssh.status.response \"enabled\": bool Indicates SSH service status system.ssh.status handle_ssh_status system.factory.reset.ping Scan for extra factory reset plugins system.factory.reset.register handle_reset_register system.factory.reset.start Indicates the start of the factory reset process system.factory.reset handle_factory_reset_request system.factory.reset.phal \"skill_id\": str Triggers extra hardware specific factory reset PHAL plugins system.factory.reset handle_factory_reset_request system.factory.reset.complete Indicates completion of the factory reset process system.factory.reset ovos.shell.exec.factory.reset \"script\": str Ask ovos-shell to run a script as part of factory reset system.factory.reset system.reboot Requests a system reboot system.factory.reset handle_reboot_request","title":"PHAL System"},{"location":"ovos_PHAL_plugin_system/#phal-system","text":"","title":"PHAL System"},{"location":"ovos_PHAL_plugin_system/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled By system.ntp.sync \"display\": bool Requests synchronization of the system clock handle_ntp_sync_request system.ssh.status Checks SSH service status and emits a response handle_ssh_status system.ssh.enable \"display\": bool Requests enabling the SSH service handle_ssh_enable_request system.ssh.disable \"display\": bool Requests disabling the SSH service handle_ssh_disable_request system.reboot \"display\": bool Requests a system reboot handle_reboot_request system.shutdown \"display\": bool Requests a system shutdown handle_shutdown_request system.factory.reset \"wipe_cache\": bool \"wipe_data\":bool \"wipe_logs\":bool \"wipe_configs\":bool \"reset_hardware\":bool \"script\":bool \"reboot\":bool Requests a factory reset of the system handle_factory_reset_request system.factory.reset.register \"skill_id\": str Registers a hardware specific factory reset handler handle_reset_register system.configure.language \"language_code\": str \"display\": bool Requests global language configuration system.configure.language.complete handle_configure_language_request system.mycroft.service.restart \"display\": bool Requests a restart of the Mycroft service handle_mycroft_restart_request system.factory.reset.phal.complete \"skill_id\": str Indicates completion of PHAL-based factory reset system.factory.reset.phal handle_factory_reset_request","title":"Listens to"},{"location":"ovos_PHAL_plugin_system/#emits","text":"Message Type Message Data Description Trigger Message Type Emitted by system.ntp.sync.complete Indicates completion of NTP synchronization system.ntp.sync handle_ntp_sync_request system.ssh.status.response \"enabled\": bool Indicates SSH service status system.ssh.status handle_ssh_status system.factory.reset.ping Scan for extra factory reset plugins system.factory.reset.register handle_reset_register system.factory.reset.start Indicates the start of the factory reset process system.factory.reset handle_factory_reset_request system.factory.reset.phal \"skill_id\": str Triggers extra hardware specific factory reset PHAL plugins system.factory.reset handle_factory_reset_request system.factory.reset.complete Indicates completion of the factory reset process system.factory.reset ovos.shell.exec.factory.reset \"script\": str Ask ovos-shell to run a script as part of factory reset system.factory.reset system.reboot Requests a system reboot system.factory.reset handle_reboot_request","title":"Emits"},{"location":"ovos_PHAL_plugin_wifi_setup/","text":"PHAL Wifi Setup The WIFI setup plugin is responsible from managing the wifi setup process, additional plugins are required to provide specific wifi implementations, this plugin just coordinates the co-existence of multiple wifi setup methods Listens to Message Type Message Data Description Emitted Response Type Handled by ovos.phal.wifi.plugin.register.client 'client': str 'type': str 'display_text': str 'has_gui': bool 'requires_input': bool Register a wifi setup client with the plugin ovos.phal.wifi.plugin.client.registered handle_register_client ovos.phal.wifi.plugin.deregister.client 'client': str Deregister a wifi setup client from the plugin ovos.phal.wifi.plugin.client.deregistered handle_deregister_client ovos.phal.wifi.plugin.get.registered.clients Get the list of registered clients ovos.phal.wifi.plugin.registered.clients handle_get_registered_clients ovos.phal.wifi.plugin.set.active.client 'client': str 'id': str Activate a wifi setup client ovos.phal.wifi.plugin.activate.{clientID} handle_set_active_client ovos.phal.wifi.plugin.remove.active.client Deactivate a wifi setup client ovos.phal.wifi.plugin.deactivate.{clientID} handle_remove_active_client ovos.phal.wifi.plugin.client.setup.failure Informs the plugin that the wifi setup failed handle_client_setup_failure ovos.phal.wifi.plugin.client.select 'client': str 'id': str Informs the plugin about the user selected setup mechanism handle_client_select ovos.phal.wifi.plugin.skip.setup Informs the plugin that user wants to do setup later ovos.phal.wifi.plugin.fully_offline handle_skip_setup ovos.phal.wifi.plugin.fully_offline Notify that the user has selected fully offline operation ovos.phal.wifi.plugin.fully_offline handle_fully_offline ovos.phal.wifi.plugin.client.select.page.removed handle_setup_page_removed ovos.phal.wifi.plugin.user.activated Inform the plugin that the user has activated a wifi setup client handle_user_activated mycroft.internet.connected Inform the plugin that the internet is connected handle_internet_connected ovos.phal.wifi.plugin.status Report status of wifi setup plugin ovos.phal.wifi.plugin.status,response ovos.phal.wifi.plugin.alive handle_ready_check mycroft.internet.is_ready handle_ready_check Emits Message Type Message Data Description Trigger Message Type Emitted by ovos.phal.wifi.plugin.alive Inform the wifi clients that the plugin is alive on startup ovos.phal.wifi.plugin.status on load handle_status_request ovos.phal.wifi.plugin.client.registration.failure \"error\": \"str\" Registration failed handle_register_client ovos.phal.wifi.plugin.client.registered \"client\": str \"type\": str \"display_text\": str \"has_gui\": bool \"requires_input\": bool \"id\": str Registration successful handle_register_client ovos.phal.wifi.plugin.client.deregistered \"client\": str Deregistration successful handle_deregister_client ovos.phal.wifi.plugin.registered.clients \"clients\": list Report registered wifi setup clients ovos.phal.wifi.plugin.get.registered.clients handle_get_registered_clients ovos.phal.wifi.plugin.activate.{clientID} Inform the client that the activation was successful handle_set_active_client ovos.phal.wifi.plugin.deactivate.{clientID} Inform the client that the deactivation was successful mycroft.internet.connected handle_remove_active_client ovos.phal.wifi.plugin.fully_offline Notify that the user has selected fully offline operation handle_fully_offline ovos.phal.wifi.plugin.status.response \"watchdog_active\": bool \"in_setup\": bool Notify setup and watchdog status ovos.phal.wifi.plugin.status handle_status_request ovos.phal.wifi.plugin.setup.launched Inform about the start of wifi setup process launch_networking_setup ovos.phal.wifi.plugin.setup.failed \"error\": \"str\" Inform the interested parties that the plugin itself failed launch_networking_setup ovos.phal.wifi.plugin.setup.completed Inform about the end of wifi setup. typically on internet connection handle_internet_connected ovos.shell.status.ok Make sure the GUI spinner is dismissed handle_internet_connected mycroft.internet.is_ready.response \"status\": bool Report to ovos-core if internet setup has finished mycroft.internet.is_ready handle_ready_check ovos.phal.wifi.plugin.stop.setup.event Abort ongoing wifi setup, typically during shutdown stop_setup enclosure.notify.no_internet Signal other PHAL plugins there is no internet available _watchdog","title":"PHAL Wifi Setup"},{"location":"ovos_PHAL_plugin_wifi_setup/#phal-wifi-setup","text":"The WIFI setup plugin is responsible from managing the wifi setup process, additional plugins are required to provide specific wifi implementations, this plugin just coordinates the co-existence of multiple wifi setup methods","title":"PHAL Wifi Setup"},{"location":"ovos_PHAL_plugin_wifi_setup/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled by ovos.phal.wifi.plugin.register.client 'client': str 'type': str 'display_text': str 'has_gui': bool 'requires_input': bool Register a wifi setup client with the plugin ovos.phal.wifi.plugin.client.registered handle_register_client ovos.phal.wifi.plugin.deregister.client 'client': str Deregister a wifi setup client from the plugin ovos.phal.wifi.plugin.client.deregistered handle_deregister_client ovos.phal.wifi.plugin.get.registered.clients Get the list of registered clients ovos.phal.wifi.plugin.registered.clients handle_get_registered_clients ovos.phal.wifi.plugin.set.active.client 'client': str 'id': str Activate a wifi setup client ovos.phal.wifi.plugin.activate.{clientID} handle_set_active_client ovos.phal.wifi.plugin.remove.active.client Deactivate a wifi setup client ovos.phal.wifi.plugin.deactivate.{clientID} handle_remove_active_client ovos.phal.wifi.plugin.client.setup.failure Informs the plugin that the wifi setup failed handle_client_setup_failure ovos.phal.wifi.plugin.client.select 'client': str 'id': str Informs the plugin about the user selected setup mechanism handle_client_select ovos.phal.wifi.plugin.skip.setup Informs the plugin that user wants to do setup later ovos.phal.wifi.plugin.fully_offline handle_skip_setup ovos.phal.wifi.plugin.fully_offline Notify that the user has selected fully offline operation ovos.phal.wifi.plugin.fully_offline handle_fully_offline ovos.phal.wifi.plugin.client.select.page.removed handle_setup_page_removed ovos.phal.wifi.plugin.user.activated Inform the plugin that the user has activated a wifi setup client handle_user_activated mycroft.internet.connected Inform the plugin that the internet is connected handle_internet_connected ovos.phal.wifi.plugin.status Report status of wifi setup plugin ovos.phal.wifi.plugin.status,response ovos.phal.wifi.plugin.alive handle_ready_check mycroft.internet.is_ready handle_ready_check","title":"Listens to"},{"location":"ovos_PHAL_plugin_wifi_setup/#emits","text":"Message Type Message Data Description Trigger Message Type Emitted by ovos.phal.wifi.plugin.alive Inform the wifi clients that the plugin is alive on startup ovos.phal.wifi.plugin.status on load handle_status_request ovos.phal.wifi.plugin.client.registration.failure \"error\": \"str\" Registration failed handle_register_client ovos.phal.wifi.plugin.client.registered \"client\": str \"type\": str \"display_text\": str \"has_gui\": bool \"requires_input\": bool \"id\": str Registration successful handle_register_client ovos.phal.wifi.plugin.client.deregistered \"client\": str Deregistration successful handle_deregister_client ovos.phal.wifi.plugin.registered.clients \"clients\": list Report registered wifi setup clients ovos.phal.wifi.plugin.get.registered.clients handle_get_registered_clients ovos.phal.wifi.plugin.activate.{clientID} Inform the client that the activation was successful handle_set_active_client ovos.phal.wifi.plugin.deactivate.{clientID} Inform the client that the deactivation was successful mycroft.internet.connected handle_remove_active_client ovos.phal.wifi.plugin.fully_offline Notify that the user has selected fully offline operation handle_fully_offline ovos.phal.wifi.plugin.status.response \"watchdog_active\": bool \"in_setup\": bool Notify setup and watchdog status ovos.phal.wifi.plugin.status handle_status_request ovos.phal.wifi.plugin.setup.launched Inform about the start of wifi setup process launch_networking_setup ovos.phal.wifi.plugin.setup.failed \"error\": \"str\" Inform the interested parties that the plugin itself failed launch_networking_setup ovos.phal.wifi.plugin.setup.completed Inform about the end of wifi setup. typically on internet connection handle_internet_connected ovos.shell.status.ok Make sure the GUI spinner is dismissed handle_internet_connected mycroft.internet.is_ready.response \"status\": bool Report to ovos-core if internet setup has finished mycroft.internet.is_ready handle_ready_check ovos.phal.wifi.plugin.stop.setup.event Abort ongoing wifi setup, typically during shutdown stop_setup enclosure.notify.no_internet Signal other PHAL plugins there is no internet available _watchdog","title":"Emits"},{"location":"ovos_audio/","text":"ovos-audio PlaybackService AudioService PlaybackService Listens To Message Type Message Data Description Response Type(s) handled by opm.tts.query Responds with TTS plugin data. opm.tts.query.response self.handle_opm_tts_query opm.g2p.query Responds with G2P plugin data. opm.g2p.query.response self.handle_opm_g2p_query opm.audio.query Responds with audio service plugin data. opm.audio.query.response self.handle_opm_audio_query speak 'utterance': str 'expect_response': bool generates and queues TTS audio for playback self.handle_speak mycroft.stop Handles global stop and shuts down speech. mycroft.stop.handled self.handle_stop mycroft.audio.speech.stop stops speech. self.handle_stop mycroft.audio.speak.status reports if OVOS is speaking. mycroft.audio.is_speaking self.handle_speak_status mycroft.audio.queue 'uri': str 'listen': bool 'viseme': str 'audio_ext': str Queues a sound file to play in the speech thread. self.handle_queue_audio mycroft.audio.play_sound 'uri': str Plays a sound file immediately (may play over TTS). self.handle_instant_play ovos.languages.tts Handles a request for supported TTS languages. ovos.languages.tts.response self.handle_get_languages_tts Emits Message Type Message Data Description In Response To opm.tts.query.response 'langs': List 'plugins': {lang: List} configs: {plugin_name: {lang: List}} options: {lang: List}} Responds to opm.tts.query with TTS plugin data. opm.tts.query opm.g2p.query.response 'langs': List 'plugins': {lang: List} configs: {plugin_name: {lang: List}} options: {lang: List}} Responds to opm.g2p.query with G2P plugin data. opm.g2p.query opm.audio.query.response 'plugins': List configs: {backend_name: Dict} options: {lang: List}} Responds to opm.audio.query with audio service plugin data. opm.audio.query mycroft.audio.is_speaking 'speaking': bool Reports whether OVOS is currently speaking. mycroft.audio.speak.status ovos.languages.tts.response 'langs': List Handles a request for supported TTS languages. ovos.languages.tts AudioService Listens to Message Type Message Data Description Response Type(s) handled by mycroft.audio.service.play 'tracks': List 'repeat': bool Starts playback of a tracklist. self._play mycroft.audio.service.queue 'tracks': List Queues up tracks for playback. self._queue mycroft.audio.service.pause Pauses the current audio service. self._pause mycroft.audio.service.resume Resumes playback of the paused audio. self._resume mycroft.audio.service.stop Stops any playing audio service. self._stop mycroft.audio.service.next Skips the current track and plays the next. self._next mycroft.audio.service.prev Starts playing the previous track. self._prev mycroft.audio.service.track_info Requests track information. mycroft.audio.service.track_info_reply self._track_info mycroft.audio.service.list_backends Requests a list of available audio backends. self._list_backends mycroft.audio.service.set_track_position 'position': int Sets the track position in milliseconds. self._set_track_position mycroft.audio.service.get_track_position Requests the current track position. self._get_track_position mycroft.audio.service.get_track_length Requests the duration of the audio in milliseconds. self._get_track_length mycroft.audio.service.seek_forward 'seconds': int Seeks forward by the specified number of seconds. self._seek_forward mycroft.audio.service.seek_backward 'seconds': int Seeks backward by the specified number of seconds. self._seek_backward recognizer_loop:audio_output_start Triggered when audio output starts and lowers the volume. self._lower_volume recognizer_loop:record_begin Triggered when recording begins and lowers the volume. self._lower_volume recognizer_loop:audio_output_end Triggered when audio output ends and restores the volume. self._restore_volume recognizer_loop:record_end Restores the volume after recording is done. self._restore_volume_after_record Emits Message Type Message Data Description In Response to mycroft.audio.playing_track 'track': str Informs about the track about to start playing. self.track_start mycroft.audio.queue_end Indicates the end of the playlist. self.track_start mycroft.stop.handled 'by': \"audio:{service_name}\" Indicates that audio playback was stopped. mycroft.audio.service.stop mycroft.audio.service.track_info_reply 'data': Dict Sends track information in response to a request. mycroft.audio.service.track_info","title":"Audio"},{"location":"ovos_audio/#ovos-audio","text":"PlaybackService AudioService","title":"ovos-audio"},{"location":"ovos_audio/#playbackservice","text":"","title":"PlaybackService"},{"location":"ovos_audio/#listens-to","text":"Message Type Message Data Description Response Type(s) handled by opm.tts.query Responds with TTS plugin data. opm.tts.query.response self.handle_opm_tts_query opm.g2p.query Responds with G2P plugin data. opm.g2p.query.response self.handle_opm_g2p_query opm.audio.query Responds with audio service plugin data. opm.audio.query.response self.handle_opm_audio_query speak 'utterance': str 'expect_response': bool generates and queues TTS audio for playback self.handle_speak mycroft.stop Handles global stop and shuts down speech. mycroft.stop.handled self.handle_stop mycroft.audio.speech.stop stops speech. self.handle_stop mycroft.audio.speak.status reports if OVOS is speaking. mycroft.audio.is_speaking self.handle_speak_status mycroft.audio.queue 'uri': str 'listen': bool 'viseme': str 'audio_ext': str Queues a sound file to play in the speech thread. self.handle_queue_audio mycroft.audio.play_sound 'uri': str Plays a sound file immediately (may play over TTS). self.handle_instant_play ovos.languages.tts Handles a request for supported TTS languages. ovos.languages.tts.response self.handle_get_languages_tts","title":"Listens To"},{"location":"ovos_audio/#emits","text":"Message Type Message Data Description In Response To opm.tts.query.response 'langs': List 'plugins': {lang: List} configs: {plugin_name: {lang: List}} options: {lang: List}} Responds to opm.tts.query with TTS plugin data. opm.tts.query opm.g2p.query.response 'langs': List 'plugins': {lang: List} configs: {plugin_name: {lang: List}} options: {lang: List}} Responds to opm.g2p.query with G2P plugin data. opm.g2p.query opm.audio.query.response 'plugins': List configs: {backend_name: Dict} options: {lang: List}} Responds to opm.audio.query with audio service plugin data. opm.audio.query mycroft.audio.is_speaking 'speaking': bool Reports whether OVOS is currently speaking. mycroft.audio.speak.status ovos.languages.tts.response 'langs': List Handles a request for supported TTS languages. ovos.languages.tts","title":"Emits"},{"location":"ovos_audio/#audioservice","text":"","title":"AudioService"},{"location":"ovos_audio/#listens-to_1","text":"Message Type Message Data Description Response Type(s) handled by mycroft.audio.service.play 'tracks': List 'repeat': bool Starts playback of a tracklist. self._play mycroft.audio.service.queue 'tracks': List Queues up tracks for playback. self._queue mycroft.audio.service.pause Pauses the current audio service. self._pause mycroft.audio.service.resume Resumes playback of the paused audio. self._resume mycroft.audio.service.stop Stops any playing audio service. self._stop mycroft.audio.service.next Skips the current track and plays the next. self._next mycroft.audio.service.prev Starts playing the previous track. self._prev mycroft.audio.service.track_info Requests track information. mycroft.audio.service.track_info_reply self._track_info mycroft.audio.service.list_backends Requests a list of available audio backends. self._list_backends mycroft.audio.service.set_track_position 'position': int Sets the track position in milliseconds. self._set_track_position mycroft.audio.service.get_track_position Requests the current track position. self._get_track_position mycroft.audio.service.get_track_length Requests the duration of the audio in milliseconds. self._get_track_length mycroft.audio.service.seek_forward 'seconds': int Seeks forward by the specified number of seconds. self._seek_forward mycroft.audio.service.seek_backward 'seconds': int Seeks backward by the specified number of seconds. self._seek_backward recognizer_loop:audio_output_start Triggered when audio output starts and lowers the volume. self._lower_volume recognizer_loop:record_begin Triggered when recording begins and lowers the volume. self._lower_volume recognizer_loop:audio_output_end Triggered when audio output ends and restores the volume. self._restore_volume recognizer_loop:record_end Restores the volume after recording is done. self._restore_volume_after_record","title":"Listens to"},{"location":"ovos_audio/#emits_1","text":"Message Type Message Data Description In Response to mycroft.audio.playing_track 'track': str Informs about the track about to start playing. self.track_start mycroft.audio.queue_end Indicates the end of the playlist. self.track_start mycroft.stop.handled 'by': \"audio:{service_name}\" Indicates that audio playback was stopped. mycroft.audio.service.stop mycroft.audio.service.track_info_reply 'data': Dict Sends track information in response to a request. mycroft.audio.service.track_info","title":"Emits"},{"location":"ovos_core/","text":"ovos-core SkillManager Listens to Message Type Message Data Description Response Type(s) ovos.setup.state.get Requests the setup state from the ovos-setup skill ovos.setup.state mycroft.internet.connected Indicates that the internet is connected mycroft.network.connected Indicates that the network is connected mycroft.gui.available \"permanent\": bool Indicates that the GUI is available mycroft.internet.disconnected Indicates that the internet is disconnected mycroft.network.disconnected Indicates that the network is disconnected mycroft.gui.unavailable Indicates that the GUI is unavailable mycroft.skills.trained Indicates that skill intents have been trained ovos.setup.finished Indicates the completion of the setup process skillmanager.activate \"skill_id\": str Loads a skill, if it is available skillmanager.activate.response skillmanager.deactivate \"skill_id\": str Unloads a skill, if it is loaded skillmanager.deactivate.response skillmanager.keep \"skill_id\": str Unloads all skills but the provided skillmanager.list Returns a list of all loaded skills mycroft.skills.list Emits Message Type Message Data Description In Response to / sent by ovos.skills.settings_changed \"skill_id\": str Notifies a change in skill settings.json self._handle_settings_file_change mycroft.skills.list List[\" \": \"active\": bool, \"id\": string] Provides a list of loaded skills skillmanager.list mycroft.skills.error \"internet_loaded\": bool \"network_loaded\": bool Indicates an error waiting for internet skills to load at startup self.run mycroft.skills.initialized Indicates that skills have been initialized mycroft.internet.connected when ovos-phal-plugin-connectivity-events missing perform direct network checks mycroft.network.connected when ovos-phal-plugin-connectivity-events missing perform direct network checks mycroft.ready Signals that Mycroft is ready self.handle_check_device_readiness SkillsStore Listens to Message Type Message Data Description Response Type(s) ovos.skills.install \"url\": str Installs a skill from a GitHub URL. ovos.skills.install.complete, ovos.skills.install.failed ovos.skills.uninstall Uninstalls a skill. ovos.skills.uninstall.failed ovos.pip.install \"packages\": list Installs Python packages using pip. ovos.pip.install.complete, ovos.pip.install.failed ovos.pip.uninstall \"packages\": list Uninstalls Python packages using pip. ovos.pip.uninstall.complete, ovos.pip.uninstall.failed Emits Message Type Message Data Description In Response to / sent by mycroft.audio.play_sound \"uri\": str play sounds via ovos-audio self.play_error_sound self.play_success_sound ovos.skills.install.failed \"error\": str signal that installation failed self.handle_install_skill ovos.skills.install.complete signal that installation was successful self.handle_install_skill ovos.skills.uninstall.failed \"error\": str signal that skill uninstallation failed self.handle_uninstall_skill ovos.skills.uninstall.complete signal that skill uninstallation was successful self.handle_uninstall_skill ovos.skills.pip.install.failed \"error\": str signal that pypi installation failed self.handle_install_python ovos.skills.pip.install.complete signal that pypi installation was successful self.handle_install_python ovos.skills.pip.uninstall.failed \"error\": str signal that pypi uninstallation failed self.handle_uninstall_python ovos.skills.pip.uninstall.complete signal that pypi uninstallation was successful self.handle_uninstall_python IntentService Listens to Message Type Message Data Description Response Type(s) recognizer_loop:utterance utterances: list lang: str Handle a natural language question from the user ovos.utterance.cancelled , ovos.utterance.handled register_vocab entity_value: str entity_type: str regex: str alias_of: str lang: str Register vocabulary for the Adapt intent service register_intent intent_type: str Register an intent for the Adapt intent service detach_intent intent_name: str Remove a registered intent from the intent service detach_skill skill_id: str Remove all intents registered for a specific skill from the intent service add_context context: str word: str origin: str Add context to the session context manager remove_context context: str Remove specific context from the session context manager clear_context Clear all keywords from the session context manager intent.service.intent.get utterance: str DEPRECATED: Get intent information for a given utterance intent.service.intent.reply intent.service.skills.get DEPRECATED: Get a list of registered skills intent.service.skills.reply intent.service.adapt.get utterance: str DEPRECATED: Get Adapt intent information for a given utterance intent.service.adapt.reply intent.service.adapt.manifest.get DEPRECATED: Get the manifest of registered Adapt intents intent.service.adapt.manifest intent.service.adapt.vocab.manifest.get DEPRECATED: Get the manifest of registered Adapt vocabulary intent.service.adapt.vocab.manifest intent.service.padatious.get utterance: str norm_utt: str DEPRECATED: Get Padatious intent information for a given utterance intent.service.padatious.reply intent.service.padatious.manifest.get DEPRECATED: Get the manifest of registered Padatious intents intent.service.padatious.manifest intent.service.padatious.entities.manifest.get DEPRECATED: Get the manifest of registered Padatious entities intent.service.padatious.entities.manifest Emits Selected intents have their own messages that can not be listed here Message Type Message Data Description In Response to / sent by each intent has it's own message_type Trigger selected intent recognizer_loop:utterance ovos.utterance.cancelled user said \"nevermind\" to cancel the utterance, via ovos-utterance-plugin-cancel recognizer_loop:utterance ovos.utterance.handled Finished handling a natural language question from the user recognizer_loop:utterance mycroft.audio.play_sound \"uri\": str Play error sound self.send_complete_intent_failure complete_intent_failure signal we failed to handle an utterance self.send_complete_intent_failure intent.service.intent.reply \"intent\": dict DEPRECATED: get intent that would match, excluding converse/fallback intent.service.intent.get intent.service.skills.reply \"skills\": list DEPRECATED: send list of skills with registered intents intent.service.skills.get intent.service.adapt.reply \"intent\": dict DEPRECATED: get intent that would match with adapt intent.service.adapt.get intent.service.adapt.manifest \"intents\": list DEPRECATED: get list of registered adapt intents intent.service.adapt.manifest.get intent.service.adapt.vocab.manifest \"vocab\": list DEPRECATED: get list of registered adapt keywords intent.service.adapt.vocab.manifest.get intent.service.padatious.reply \"intent\": dict DEPRECATED: get intent that would match with padatious intent.service.padatious.get intent.service.padatious.manifest \"intents\": list DEPRECATED: get list of registered padatious intents intent.service.padatious.manifest.get intent.service.padatious.entities.manifest \"entities\": list DEPRECATED: get list of registered padatious entities intent.service.padatious.entities.manifest.get CommonQAService Listens to Message Type Message Data Description Response Type(s) common_query.question 'utterance': str Handles common query questions and initiates searches. question:query question:query.response 'phrase': str 'skill_id': str 'searching': bool 'answer': str 'conf': float 'callback_data': dict Provides a response to a common query with search information and the answer. Emits Message Type Message Data Description sent by question:query 'phrase': str Initiates a common query for a specific phrase. self.handle_question question:action 'phrase': str 'skill_id': str 'callback_data': dict Trigger skill callback after answer was selected self._query_timeout question:query.timeout 'phrase': str 'skill_id': str Tell common_qa skills to stop searching self.handle_query_response speak 'utterance': str DEPRECATED: speak is now done by the selected skill self._query_timeout ConverseService Listens to Message Type Message Data Description Response Type(s) mycroft.speech.recognition.unknown Reset converse when speech recognition is unknown. intent.service.skills.deactivate \"skill_id\": str Deactivate a skill. intent.service.skills.deactivated intent.service.skills.activate \"skill_id\": str Activate a skill. intent.service.skills.activated intent.service.active_skills.get Request a list of active skills. intent.service.active_skills.reply skill.converse.get_response.enable \"skill_id\": str Enable get_response mode for skill_id skill.converse.get_response.disable \"skill_id\": str Disable get_response mode for skill_id skill.converse.pong \"skill_id\": str \"can_handle\": bool Acknowledge skill's ability to handle conversation. skill.converse.response \"result\": bool, \"error\": str Response from a skill about handling a conversation. active_skill_request \"skill_id\": str DEPRECATED: Activate a skill (backward compatibility). intent.service.skills.activated Emits Message Type Message Data Description In Response to / sent by skill.converse.ping Ping all skills to check if they want to converse. skill.converse.pong skill.converse.request \"skill_id\": str \"utterances\": list \"lang\": str Request a skill to handle a conversation. skill.converse.response intent.service.skills.deactivated \"skill_id\": str Notification that a skill has been deactivated. intent.service.skills.deactivate intent.service.skills.activated \"skill_id\": str Notification that a skill has been activated. intent.service.skills.activate intent.service.active_skills.reply \"skills\": list Reply to a request for a list of active skills. intent.service.active_skills.get {skill_id}.converse.get_response \"utterances\": list \"lang\": str send get_response answer for skill_id to handle self.converse {skill_id}.converse.request \"utterances\": list \"lang\": str send utterance for skill_id to converse self.converse FallbackService Listens to Message Type Message Data Description Response Type(s) ovos.skills.fallback.register \"skill_id\": str \"priority\": int Registers a skill for fallback handling with an optional priority level. ovos.skills.fallback.deregister \"skill_id\": str Deregisters a skill from fallback handling. ovos.skills.fallback.{skill_id}.response \"result\": bool \"error\": str Indicates the result of the specific skill's fallback handling attempt and any potential errors. ovos.skills.fallback.pong \"skill_id\": str \"can_handle\": bool Acknowledges a skill's willingness to handle fallback and whether it can handle it. Emits Message Type Message Data Description Sent by ovos.skills.fallback.ping \"skill_id\": str Requests skills to acknowledge their willingness to handle fallback for a specific skill. self._collect_fallback_skills ovos.skills.fallback.{skill_id}.request \"skill_id\": str \"utterance\": str \"lang\": str Requests a specific skill to attempt fallback handling for the given utterances and language. self.attempt_fallback mycroft.skills.fallback \"utterance\": str \"lang\": str \"fallback_range\": tuple DEPRECATED fallback handling by a legacy fallback skill singleton class. PadaciosoService Listens to Message Type Message Data Description Response Type(s) padatious:register_intent 'name': str 'file_name': str 'samples': List[str] 'lang': str Register a new intent with Padacioso. padatious:register_entity 'name': str 'file_name': str 'samples': List[str] 'lang': str Register a new entity with Padacioso. detach_intent 'intent_name': str Detach a specific intent from Padacioso. detach_skill 'skill_id': str Detach all intents associated with a skill from Padacioso. PadatiousService Listens to Message Type Message Data Description Response Type(s) padatious:register_intent 'name': str 'file_name': str 'samples': List[str] 'lang': str Register an intent with Padatious for intent recognition. padatious:register_entity 'name': str 'file_name': str 'samples': List[str] 'lang': str Register an entity with Padatious for entity recognition. detach_intent 'intent_name': str Remove a registered intent from Padatious. detach_skill 'skill_id': str Remove all intents registered by a specific skill from Padatious. mycroft.skills.initialized Triggered when skills are initialized, used to initiate training. mycroft.skills.trained Emits Message Type Message Data Description In Response to / sent by mycroft.skills.trained Indicates that intents classifiers have been trained. mycroft.skills.initialized","title":"Core"},{"location":"ovos_core/#ovos-core","text":"","title":"ovos-core"},{"location":"ovos_core/#skillmanager","text":"","title":"SkillManager"},{"location":"ovos_core/#listens-to","text":"Message Type Message Data Description Response Type(s) ovos.setup.state.get Requests the setup state from the ovos-setup skill ovos.setup.state mycroft.internet.connected Indicates that the internet is connected mycroft.network.connected Indicates that the network is connected mycroft.gui.available \"permanent\": bool Indicates that the GUI is available mycroft.internet.disconnected Indicates that the internet is disconnected mycroft.network.disconnected Indicates that the network is disconnected mycroft.gui.unavailable Indicates that the GUI is unavailable mycroft.skills.trained Indicates that skill intents have been trained ovos.setup.finished Indicates the completion of the setup process skillmanager.activate \"skill_id\": str Loads a skill, if it is available skillmanager.activate.response skillmanager.deactivate \"skill_id\": str Unloads a skill, if it is loaded skillmanager.deactivate.response skillmanager.keep \"skill_id\": str Unloads all skills but the provided skillmanager.list Returns a list of all loaded skills mycroft.skills.list","title":"Listens to"},{"location":"ovos_core/#emits","text":"Message Type Message Data Description In Response to / sent by ovos.skills.settings_changed \"skill_id\": str Notifies a change in skill settings.json self._handle_settings_file_change mycroft.skills.list List[\" \": \"active\": bool, \"id\": string] Provides a list of loaded skills skillmanager.list mycroft.skills.error \"internet_loaded\": bool \"network_loaded\": bool Indicates an error waiting for internet skills to load at startup self.run mycroft.skills.initialized Indicates that skills have been initialized mycroft.internet.connected when ovos-phal-plugin-connectivity-events missing perform direct network checks mycroft.network.connected when ovos-phal-plugin-connectivity-events missing perform direct network checks mycroft.ready Signals that Mycroft is ready self.handle_check_device_readiness","title":"Emits"},{"location":"ovos_core/#skillsstore","text":"","title":"SkillsStore"},{"location":"ovos_core/#listens-to_1","text":"Message Type Message Data Description Response Type(s) ovos.skills.install \"url\": str Installs a skill from a GitHub URL. ovos.skills.install.complete, ovos.skills.install.failed ovos.skills.uninstall Uninstalls a skill. ovos.skills.uninstall.failed ovos.pip.install \"packages\": list Installs Python packages using pip. ovos.pip.install.complete, ovos.pip.install.failed ovos.pip.uninstall \"packages\": list Uninstalls Python packages using pip. ovos.pip.uninstall.complete, ovos.pip.uninstall.failed","title":"Listens to"},{"location":"ovos_core/#emits_1","text":"Message Type Message Data Description In Response to / sent by mycroft.audio.play_sound \"uri\": str play sounds via ovos-audio self.play_error_sound self.play_success_sound ovos.skills.install.failed \"error\": str signal that installation failed self.handle_install_skill ovos.skills.install.complete signal that installation was successful self.handle_install_skill ovos.skills.uninstall.failed \"error\": str signal that skill uninstallation failed self.handle_uninstall_skill ovos.skills.uninstall.complete signal that skill uninstallation was successful self.handle_uninstall_skill ovos.skills.pip.install.failed \"error\": str signal that pypi installation failed self.handle_install_python ovos.skills.pip.install.complete signal that pypi installation was successful self.handle_install_python ovos.skills.pip.uninstall.failed \"error\": str signal that pypi uninstallation failed self.handle_uninstall_python ovos.skills.pip.uninstall.complete signal that pypi uninstallation was successful self.handle_uninstall_python","title":"Emits"},{"location":"ovos_core/#intentservice","text":"","title":"IntentService"},{"location":"ovos_core/#listens-to_2","text":"Message Type Message Data Description Response Type(s) recognizer_loop:utterance utterances: list lang: str Handle a natural language question from the user ovos.utterance.cancelled , ovos.utterance.handled register_vocab entity_value: str entity_type: str regex: str alias_of: str lang: str Register vocabulary for the Adapt intent service register_intent intent_type: str Register an intent for the Adapt intent service detach_intent intent_name: str Remove a registered intent from the intent service detach_skill skill_id: str Remove all intents registered for a specific skill from the intent service add_context context: str word: str origin: str Add context to the session context manager remove_context context: str Remove specific context from the session context manager clear_context Clear all keywords from the session context manager intent.service.intent.get utterance: str DEPRECATED: Get intent information for a given utterance intent.service.intent.reply intent.service.skills.get DEPRECATED: Get a list of registered skills intent.service.skills.reply intent.service.adapt.get utterance: str DEPRECATED: Get Adapt intent information for a given utterance intent.service.adapt.reply intent.service.adapt.manifest.get DEPRECATED: Get the manifest of registered Adapt intents intent.service.adapt.manifest intent.service.adapt.vocab.manifest.get DEPRECATED: Get the manifest of registered Adapt vocabulary intent.service.adapt.vocab.manifest intent.service.padatious.get utterance: str norm_utt: str DEPRECATED: Get Padatious intent information for a given utterance intent.service.padatious.reply intent.service.padatious.manifest.get DEPRECATED: Get the manifest of registered Padatious intents intent.service.padatious.manifest intent.service.padatious.entities.manifest.get DEPRECATED: Get the manifest of registered Padatious entities intent.service.padatious.entities.manifest","title":"Listens to"},{"location":"ovos_core/#emits_2","text":"Selected intents have their own messages that can not be listed here Message Type Message Data Description In Response to / sent by each intent has it's own message_type Trigger selected intent recognizer_loop:utterance ovos.utterance.cancelled user said \"nevermind\" to cancel the utterance, via ovos-utterance-plugin-cancel recognizer_loop:utterance ovos.utterance.handled Finished handling a natural language question from the user recognizer_loop:utterance mycroft.audio.play_sound \"uri\": str Play error sound self.send_complete_intent_failure complete_intent_failure signal we failed to handle an utterance self.send_complete_intent_failure intent.service.intent.reply \"intent\": dict DEPRECATED: get intent that would match, excluding converse/fallback intent.service.intent.get intent.service.skills.reply \"skills\": list DEPRECATED: send list of skills with registered intents intent.service.skills.get intent.service.adapt.reply \"intent\": dict DEPRECATED: get intent that would match with adapt intent.service.adapt.get intent.service.adapt.manifest \"intents\": list DEPRECATED: get list of registered adapt intents intent.service.adapt.manifest.get intent.service.adapt.vocab.manifest \"vocab\": list DEPRECATED: get list of registered adapt keywords intent.service.adapt.vocab.manifest.get intent.service.padatious.reply \"intent\": dict DEPRECATED: get intent that would match with padatious intent.service.padatious.get intent.service.padatious.manifest \"intents\": list DEPRECATED: get list of registered padatious intents intent.service.padatious.manifest.get intent.service.padatious.entities.manifest \"entities\": list DEPRECATED: get list of registered padatious entities intent.service.padatious.entities.manifest.get","title":"Emits"},{"location":"ovos_core/#commonqaservice","text":"","title":"CommonQAService"},{"location":"ovos_core/#listens-to_3","text":"Message Type Message Data Description Response Type(s) common_query.question 'utterance': str Handles common query questions and initiates searches. question:query question:query.response 'phrase': str 'skill_id': str 'searching': bool 'answer': str 'conf': float 'callback_data': dict Provides a response to a common query with search information and the answer.","title":"Listens to"},{"location":"ovos_core/#emits_3","text":"Message Type Message Data Description sent by question:query 'phrase': str Initiates a common query for a specific phrase. self.handle_question question:action 'phrase': str 'skill_id': str 'callback_data': dict Trigger skill callback after answer was selected self._query_timeout question:query.timeout 'phrase': str 'skill_id': str Tell common_qa skills to stop searching self.handle_query_response speak 'utterance': str DEPRECATED: speak is now done by the selected skill self._query_timeout","title":"Emits"},{"location":"ovos_core/#converseservice","text":"","title":"ConverseService"},{"location":"ovos_core/#listens-to_4","text":"Message Type Message Data Description Response Type(s) mycroft.speech.recognition.unknown Reset converse when speech recognition is unknown. intent.service.skills.deactivate \"skill_id\": str Deactivate a skill. intent.service.skills.deactivated intent.service.skills.activate \"skill_id\": str Activate a skill. intent.service.skills.activated intent.service.active_skills.get Request a list of active skills. intent.service.active_skills.reply skill.converse.get_response.enable \"skill_id\": str Enable get_response mode for skill_id skill.converse.get_response.disable \"skill_id\": str Disable get_response mode for skill_id skill.converse.pong \"skill_id\": str \"can_handle\": bool Acknowledge skill's ability to handle conversation. skill.converse.response \"result\": bool, \"error\": str Response from a skill about handling a conversation. active_skill_request \"skill_id\": str DEPRECATED: Activate a skill (backward compatibility). intent.service.skills.activated","title":"Listens to"},{"location":"ovos_core/#emits_4","text":"Message Type Message Data Description In Response to / sent by skill.converse.ping Ping all skills to check if they want to converse. skill.converse.pong skill.converse.request \"skill_id\": str \"utterances\": list \"lang\": str Request a skill to handle a conversation. skill.converse.response intent.service.skills.deactivated \"skill_id\": str Notification that a skill has been deactivated. intent.service.skills.deactivate intent.service.skills.activated \"skill_id\": str Notification that a skill has been activated. intent.service.skills.activate intent.service.active_skills.reply \"skills\": list Reply to a request for a list of active skills. intent.service.active_skills.get {skill_id}.converse.get_response \"utterances\": list \"lang\": str send get_response answer for skill_id to handle self.converse {skill_id}.converse.request \"utterances\": list \"lang\": str send utterance for skill_id to converse self.converse","title":"Emits"},{"location":"ovos_core/#fallbackservice","text":"","title":"FallbackService"},{"location":"ovos_core/#listens-to_5","text":"Message Type Message Data Description Response Type(s) ovos.skills.fallback.register \"skill_id\": str \"priority\": int Registers a skill for fallback handling with an optional priority level. ovos.skills.fallback.deregister \"skill_id\": str Deregisters a skill from fallback handling. ovos.skills.fallback.{skill_id}.response \"result\": bool \"error\": str Indicates the result of the specific skill's fallback handling attempt and any potential errors. ovos.skills.fallback.pong \"skill_id\": str \"can_handle\": bool Acknowledges a skill's willingness to handle fallback and whether it can handle it.","title":"Listens to"},{"location":"ovos_core/#emits_5","text":"Message Type Message Data Description Sent by ovos.skills.fallback.ping \"skill_id\": str Requests skills to acknowledge their willingness to handle fallback for a specific skill. self._collect_fallback_skills ovos.skills.fallback.{skill_id}.request \"skill_id\": str \"utterance\": str \"lang\": str Requests a specific skill to attempt fallback handling for the given utterances and language. self.attempt_fallback mycroft.skills.fallback \"utterance\": str \"lang\": str \"fallback_range\": tuple DEPRECATED fallback handling by a legacy fallback skill singleton class.","title":"Emits"},{"location":"ovos_core/#padaciososervice","text":"","title":"PadaciosoService"},{"location":"ovos_core/#listens-to_6","text":"Message Type Message Data Description Response Type(s) padatious:register_intent 'name': str 'file_name': str 'samples': List[str] 'lang': str Register a new intent with Padacioso. padatious:register_entity 'name': str 'file_name': str 'samples': List[str] 'lang': str Register a new entity with Padacioso. detach_intent 'intent_name': str Detach a specific intent from Padacioso. detach_skill 'skill_id': str Detach all intents associated with a skill from Padacioso.","title":"Listens to"},{"location":"ovos_core/#padatiousservice","text":"","title":"PadatiousService"},{"location":"ovos_core/#listens-to_7","text":"Message Type Message Data Description Response Type(s) padatious:register_intent 'name': str 'file_name': str 'samples': List[str] 'lang': str Register an intent with Padatious for intent recognition. padatious:register_entity 'name': str 'file_name': str 'samples': List[str] 'lang': str Register an entity with Padatious for entity recognition. detach_intent 'intent_name': str Remove a registered intent from Padatious. detach_skill 'skill_id': str Remove all intents registered by a specific skill from Padatious. mycroft.skills.initialized Triggered when skills are initialized, used to initiate training. mycroft.skills.trained","title":"Listens to"},{"location":"ovos_core/#emits_6","text":"Message Type Message Data Description In Response to / sent by mycroft.skills.trained Indicates that intents classifiers have been trained. mycroft.skills.initialized","title":"Emits"},{"location":"ovos_homescreen/","text":"ovos-homescreen HomeScreen Listens To Message Type Message Data Description Response Type(s) handled by ovos.homescreen.main_view.current_index.get Responds with the index of the current page selected in the display ovos.homescreen.main_view.current_index.get.response idle.qml ovos.homescreen.main_view.current_index.set 'current_index': int Sets the index of the current page in the display ovos.homescreen.main_view.current_index.get.response idle.qml Emits Message Type Message Data Description In Response To ovos.homescreen.main_view.current_index.get.response 'current_index': int Responds to ovos.homescreen.main_view.current_index.get with the index of current page. ovos.homescreen.main_view.current_index.get.response","title":"Homescreen"},{"location":"ovos_homescreen/#ovos-homescreen","text":"","title":"ovos-homescreen"},{"location":"ovos_homescreen/#homescreen","text":"","title":"HomeScreen"},{"location":"ovos_homescreen/#listens-to","text":"Message Type Message Data Description Response Type(s) handled by ovos.homescreen.main_view.current_index.get Responds with the index of the current page selected in the display ovos.homescreen.main_view.current_index.get.response idle.qml ovos.homescreen.main_view.current_index.set 'current_index': int Sets the index of the current page in the display ovos.homescreen.main_view.current_index.get.response idle.qml","title":"Listens To"},{"location":"ovos_homescreen/#emits","text":"Message Type Message Data Description In Response To ovos.homescreen.main_view.current_index.get.response 'current_index': int Responds to ovos.homescreen.main_view.current_index.get with the index of current page. ovos.homescreen.main_view.current_index.get.response","title":"Emits"},{"location":"persona/","text":"ovos-persona Persona NOTE: Persona is under development and did not yet have a stable release, messages below might change at any time without warning Listens to Message Type Message Data Description Emits response handled by ovos.persona.register \"name\": str \"persona\":dict Registers a new persona with the given name. ovos.persona.deregister \"name\": str Deregisters an existing persona with the given name. ovos.persona.enable \"name\": str Activates the specified persona for use. ovos.persona.disable Deactivates the currently active persona. ovos.persona.ask \"utterance\": str Sends a user's input utterance to the active persona for a response. ovos.persona.ask.response Emits Message Type Message Data Description In Response to / sent by ovos.persona.ask.response \"utterance\": str \"lang\": str Contains the response from the active persona to a user's input utterance. \"","title":"Persona"},{"location":"persona/#ovos-persona","text":"","title":"ovos-persona"},{"location":"persona/#persona","text":"NOTE: Persona is under development and did not yet have a stable release, messages below might change at any time without warning","title":"Persona"},{"location":"persona/#listens-to","text":"Message Type Message Data Description Emits response handled by ovos.persona.register \"name\": str \"persona\":dict Registers a new persona with the given name. ovos.persona.deregister \"name\": str Deregisters an existing persona with the given name. ovos.persona.enable \"name\": str Activates the specified persona for use. ovos.persona.disable Deactivates the currently active persona. ovos.persona.ask \"utterance\": str Sends a user's input utterance to the active persona for a response. ovos.persona.ask.response","title":"Listens to"},{"location":"persona/#emits","text":"Message Type Message Data Description In Response to / sent by ovos.persona.ask.response \"utterance\": str \"lang\": str Contains the response from the active persona to a user's input utterance. \"","title":"Emits"},{"location":"phal_balena/","text":"WIFI Balena provides a hotspot for wifi setup via balena Listens To Message Type Message Data Description Emitted Response Type Handled By ovos.phal.wifi.plugin.stop.setup.event Stops the Balena WiFi setup process. ovos.phal.wifi.plugin.remove.active.client handle_stop_setup ovos.phal.wifi.plugin.client.registered \"client\": str \"id\": str Triggered when a client is registered with the WiFi plugin. ovos.phal.wifi.plugin.activate.{client_id} handle_registered ovos.phal.wifi.plugin.client.deregistered Triggered when a client is deregistered from the WiFi plugin. handle_deregistered ovos.phal.wifi.plugin.client.registration.failure \"error\": str Triggered when client registration with the WiFi plugin fails. ovos.phal.wifi.plugin.remove.active.client handle_registration_failure ovos.phal.wifi.plugin.alive Sent to keep the client alive with the WiFi plugin. register_client ovos.phal.wifi.plugin.activate.{self.client_id} Activates Balena as the wifi setup provider handle_activate_client_request ovos.phal.wifi.plugin.deactivate.{self.client_id} Deactivates Balena as the wifi setup provider handle_deactivate_client_request Emits Message Type Message Data Description Trigger Message Type Handled By ovos.phal.wifi.plugin.register.client \"client\": \"ovos-PHAL-plugin-balena-wifi\" \"type\": \"Remote\" \"display_text\": \"On Mobile Setup\" \"has_gui\": True \"requires_input\": False Registers a client with the WiFi plugin. ovos.phal.wifi.plugin.alive register_client ovos.phal.wifi.plugin.remove.active.client \"client\": \"ovos-PHAL-plugin-balena-wifi\" Requests the removal of the active client registered with the WiFi plugin. request_deactivate ovos.wifi.setup.completed Indicates that WiFi setup is completed successfully. ovos.phal.wifi.plugin.activate.{self.client_id} report_setup_complete ovos.phal.wifi.plugin.user.activated Restart WiFi setup on failure. handle_stop_setup","title":"WIFI Balena"},{"location":"phal_balena/#wifi-balena","text":"provides a hotspot for wifi setup via balena","title":"WIFI Balena"},{"location":"phal_balena/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled By ovos.phal.wifi.plugin.stop.setup.event Stops the Balena WiFi setup process. ovos.phal.wifi.plugin.remove.active.client handle_stop_setup ovos.phal.wifi.plugin.client.registered \"client\": str \"id\": str Triggered when a client is registered with the WiFi plugin. ovos.phal.wifi.plugin.activate.{client_id} handle_registered ovos.phal.wifi.plugin.client.deregistered Triggered when a client is deregistered from the WiFi plugin. handle_deregistered ovos.phal.wifi.plugin.client.registration.failure \"error\": str Triggered when client registration with the WiFi plugin fails. ovos.phal.wifi.plugin.remove.active.client handle_registration_failure ovos.phal.wifi.plugin.alive Sent to keep the client alive with the WiFi plugin. register_client ovos.phal.wifi.plugin.activate.{self.client_id} Activates Balena as the wifi setup provider handle_activate_client_request ovos.phal.wifi.plugin.deactivate.{self.client_id} Deactivates Balena as the wifi setup provider handle_deactivate_client_request","title":"Listens To"},{"location":"phal_balena/#emits","text":"Message Type Message Data Description Trigger Message Type Handled By ovos.phal.wifi.plugin.register.client \"client\": \"ovos-PHAL-plugin-balena-wifi\" \"type\": \"Remote\" \"display_text\": \"On Mobile Setup\" \"has_gui\": True \"requires_input\": False Registers a client with the WiFi plugin. ovos.phal.wifi.plugin.alive register_client ovos.phal.wifi.plugin.remove.active.client \"client\": \"ovos-PHAL-plugin-balena-wifi\" Requests the removal of the active client registered with the WiFi plugin. request_deactivate ovos.wifi.setup.completed Indicates that WiFi setup is completed successfully. ovos.phal.wifi.plugin.activate.{self.client_id} report_setup_complete ovos.phal.wifi.plugin.user.activated Restart WiFi setup on failure. handle_stop_setup","title":"Emits"},{"location":"phal_connectivity/","text":"PHAL Connectivity Events Listens to Message Type Message Data Description Response Type Handled By ovos.PHAL.internet_check Requests a check of internet and network connectivity. ovos.PHAL.internet_check.response handle_check Emits Message Type Message Data Description Trigger Message Type ovos.PHAL.internet_check.response \"internet_connected\": bool \"network_connected\":bool report current network status ovos.PHAL.internet_check mycroft.network.connected Emits when network connectivity is established. mycroft.internet.connected Emits when internet connectivity is established. mycroft.network.disconnected Emits when network connectivity is lost. mycroft.internet.disconnected Emits when internet connectivity is lost. enclosure.notify.no_internet Tell other PHAL plugins about lack of internet mycroft.internet.state \"state\": str Emits the state of internet connectivity. mycroft.network.state \"state\": str Emits the state of local network connectivity.","title":"PHAL Connectivity"},{"location":"phal_connectivity/#phal-connectivity-events","text":"","title":"PHAL Connectivity Events"},{"location":"phal_connectivity/#listens-to","text":"Message Type Message Data Description Response Type Handled By ovos.PHAL.internet_check Requests a check of internet and network connectivity. ovos.PHAL.internet_check.response handle_check","title":"Listens to"},{"location":"phal_connectivity/#emits","text":"Message Type Message Data Description Trigger Message Type ovos.PHAL.internet_check.response \"internet_connected\": bool \"network_connected\":bool report current network status ovos.PHAL.internet_check mycroft.network.connected Emits when network connectivity is established. mycroft.internet.connected Emits when internet connectivity is established. mycroft.network.disconnected Emits when network connectivity is lost. mycroft.internet.disconnected Emits when internet connectivity is lost. enclosure.notify.no_internet Tell other PHAL plugins about lack of internet mycroft.internet.state \"state\": str Emits the state of internet connectivity. mycroft.network.state \"state\": str Emits the state of local network connectivity.","title":"Emits"},{"location":"phal_ha/","text":"PHAL Home Assistant NOTE: this plugin is a placeholder, it will be deprecated / refactored once the CommonIOT framework is developed Listens to Message Type Message Data Description Emitted Response Type Handled by ovos.phal.plugin.homeassistant.get.devices Requests the list of devices from Home Assistant. ovos.phal.plugin.homeassistant.get.devices.response handle_get_devices ovos.phal.plugin.homeassistant.get.device 'device_id': str Requests information about a specific device. ovos.phal.plugin.homeassistant.get.device.response handle_get_device ovos.phal.plugin.homeassistant.device.turn_on 'device_id': str Sends a command to turn on a specific device. ovos.phal.plugin.homeassistant.device.turn_on.response handle_turn_on ovos.phal.plugin.homeassistant.device.turn_off 'device_id': str Sends a command to turn off a specific device. ovos.phal.plugin.homeassistant.device.turn_off.response handle_turn_off ovos.phal.plugin.homeassistant.get.device.display.model 'device_id': str Requests the display model of a specific device. ovos.phal.plugin.homeassistant.get.device.display.model.response handle_get_device_display_model ovos.phal.plugin.homeassistant.get.device.display.list.model Requests a list of display models for all devices. ovos.phal.plugin.homeassistant.get.device.display.list.model.response handle_get_device_display_list_model ovos.phal.plugin.homeassistant.call.supported.function 'device_id': str 'function_name': str 'function_args': dict Calls a supported function on a device. ovos.phal.plugin.homeassistant.call.supported.function.response handle_call_supported_function ovos.phal.plugin.homeassistant.start.oauth.flow 'instance': str Initiates the OAuth flow for a specific Home Assistant instance. oauth.get.app.host.info oauth.generate.qr.request oauth.token.response handle_start_oauth_flow ovos.phal.plugin.homeassistant.assist.intent 'command': str Passes an assist message to Home Assistant's Assist API. ovos.phal.plugin.homeassistant.assist.intent.response handle_assist_message ovos.phal.plugin.homeassistant.get.light.brightness 'device_id': str Requests the brightness level of a light device. ovos.phal.plugin.homeassistant.get.light.brightness.response handle_get_light_brightness ovos.phal.plugin.homeassistant.set.light.brightness 'device_id': str 'brightness': int Sets the brightness level of a light device. ovos.phal.plugin.homeassistant.set.light.brightness.response handle_set_light_brightness ovos.phal.plugin.homeassistant.increase.light.brightness 'device_id': str Increases the brightness of a light device. ovos.phal.plugin.homeassistant.increase.light.brightness.response handle_increase_light_brightness ovos.phal.plugin.homeassistant.decrease.light.brightness 'device_id': str Decreases the brightness of a light device. ovos.phal.plugin.homeassistant.decrease.light.brightness.response handle_decrease_light_brightness ovos.phal.plugin.homeassistant.get.light.color 'device_id': str Requests the color of a light device. ovos.phal.plugin.homeassistant.get.light.color.response handle_get_light_color ovos.phal.plugin.homeassistant.set.light.color 'device_id': str 'color': str Sets the color of a light device. ovos.phal.plugin.homeassistant.set.light.color.response handle_set_light_color ovos.phal.plugin.homeassistant.check_connected 'connected': bool Is the PHAL plugin is currently connected to Home Assistant? ovos.phal.plugin.homeasssistant.check_connected.response handle_check_connected ovos.phal.plugin.homeassistant.integration.query_media 'phrase': str Queries the media player for the requested media. ovos.phal.plugin.homeassistant.integration.query_media.result handle_query_media ovos-PHAL-plugin-homeassistant.home Handles the show dashboard message. N/A handle_show_dashboard ovos-PHAL-plugin-homeassistant.close Closes the Home Assistant dashboard in the GUI. N/A handle_close_dashboard ovos.phal.plugin.homeassistant.show.device.dashboard 'device_type': str Shows the dashboard for a specific device. ovos.phal.plugin.homeassistant.change.dashboard (GUI bus) handle_show_device_dashboard ovos.phal.plugin.homeassistant.show.area.dashboard 'area': str Shows the dashboard for a specific area. ovos.phal.plugin.homeassistant.change.dashboard (GUI bus) handle_show_area_dashboard ovos.phal.plugin.homeassistant.update.device.dashboard 'device_type': str Updates the dashboard for a specific device. ovos.phal.plugin.homeassistant.update.device.dashboard handle_update_device_dashboard ovos.phal.plugin.homeassistant.update.area.dashboard 'area_type': str Updates the dashboard for a specific area. N/A handle_update_area_dashboard ovos.phal.plugin.homeassistant.set.group.display.settings 'use_group_display': bool Sets the group display settings. N/A handle_set_group_display_settings ovos.phal.plugin.homeassistant.setup.instance 'url': str 'api_key': str 'assist_only': bool Sets up a new Home Assistant instance. ovos-PHAL-plugin-homeassistant.home setup_configuration configuration.updated See ovos.phal.plugin.homeassistant.setup.instance Responds to changes to configuration by re-initializing HA See ovos.phal.plugin.homeassistant.setup.instance init_configuration configuration.patch See ovos.phal.plugin.homeassistant.setup.instance Responds to changes to configuration by re-initializing HA See ovos.phal.plugin.homeassistant.setup.instance init_configuration Emits Emits all of the messages that it listens to, plus the following: Message Type Message Data Description Trigger Message Type Handled by ovos.phal.plugin.homeassistant.ready Signals that the Home Assistant plugin is ready. ovos.phal.plugin.homeassistant.setup.instance init_configuration ovos.phal.plugin.homeassistant.device.updated 'device_id': str Signals that a device has been updated, requesting a new display model. ovos.phal.plugin.homeassistant.device.state.updated device_updated oauth.get.app.host.info Requests host information for OAuth registration. oauth.get.app.host.info.response request_host_info_from_oauth oauth.generate.qr.request 'app_id': str 'skill_id': str Requests QR code for OAuth registration. oauth.generate.qr.response start_oauth_flow oauth.token.response.munged_id 'access_token': str Receives the OAuth token response. handle_token_oauth_response","title":"PHAL Home Assistant"},{"location":"phal_ha/#phal-home-assistant","text":"NOTE: this plugin is a placeholder, it will be deprecated / refactored once the CommonIOT framework is developed","title":"PHAL Home Assistant"},{"location":"phal_ha/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled by ovos.phal.plugin.homeassistant.get.devices Requests the list of devices from Home Assistant. ovos.phal.plugin.homeassistant.get.devices.response handle_get_devices ovos.phal.plugin.homeassistant.get.device 'device_id': str Requests information about a specific device. ovos.phal.plugin.homeassistant.get.device.response handle_get_device ovos.phal.plugin.homeassistant.device.turn_on 'device_id': str Sends a command to turn on a specific device. ovos.phal.plugin.homeassistant.device.turn_on.response handle_turn_on ovos.phal.plugin.homeassistant.device.turn_off 'device_id': str Sends a command to turn off a specific device. ovos.phal.plugin.homeassistant.device.turn_off.response handle_turn_off ovos.phal.plugin.homeassistant.get.device.display.model 'device_id': str Requests the display model of a specific device. ovos.phal.plugin.homeassistant.get.device.display.model.response handle_get_device_display_model ovos.phal.plugin.homeassistant.get.device.display.list.model Requests a list of display models for all devices. ovos.phal.plugin.homeassistant.get.device.display.list.model.response handle_get_device_display_list_model ovos.phal.plugin.homeassistant.call.supported.function 'device_id': str 'function_name': str 'function_args': dict Calls a supported function on a device. ovos.phal.plugin.homeassistant.call.supported.function.response handle_call_supported_function ovos.phal.plugin.homeassistant.start.oauth.flow 'instance': str Initiates the OAuth flow for a specific Home Assistant instance. oauth.get.app.host.info oauth.generate.qr.request oauth.token.response handle_start_oauth_flow ovos.phal.plugin.homeassistant.assist.intent 'command': str Passes an assist message to Home Assistant's Assist API. ovos.phal.plugin.homeassistant.assist.intent.response handle_assist_message ovos.phal.plugin.homeassistant.get.light.brightness 'device_id': str Requests the brightness level of a light device. ovos.phal.plugin.homeassistant.get.light.brightness.response handle_get_light_brightness ovos.phal.plugin.homeassistant.set.light.brightness 'device_id': str 'brightness': int Sets the brightness level of a light device. ovos.phal.plugin.homeassistant.set.light.brightness.response handle_set_light_brightness ovos.phal.plugin.homeassistant.increase.light.brightness 'device_id': str Increases the brightness of a light device. ovos.phal.plugin.homeassistant.increase.light.brightness.response handle_increase_light_brightness ovos.phal.plugin.homeassistant.decrease.light.brightness 'device_id': str Decreases the brightness of a light device. ovos.phal.plugin.homeassistant.decrease.light.brightness.response handle_decrease_light_brightness ovos.phal.plugin.homeassistant.get.light.color 'device_id': str Requests the color of a light device. ovos.phal.plugin.homeassistant.get.light.color.response handle_get_light_color ovos.phal.plugin.homeassistant.set.light.color 'device_id': str 'color': str Sets the color of a light device. ovos.phal.plugin.homeassistant.set.light.color.response handle_set_light_color ovos.phal.plugin.homeassistant.check_connected 'connected': bool Is the PHAL plugin is currently connected to Home Assistant? ovos.phal.plugin.homeasssistant.check_connected.response handle_check_connected ovos.phal.plugin.homeassistant.integration.query_media 'phrase': str Queries the media player for the requested media. ovos.phal.plugin.homeassistant.integration.query_media.result handle_query_media ovos-PHAL-plugin-homeassistant.home Handles the show dashboard message. N/A handle_show_dashboard ovos-PHAL-plugin-homeassistant.close Closes the Home Assistant dashboard in the GUI. N/A handle_close_dashboard ovos.phal.plugin.homeassistant.show.device.dashboard 'device_type': str Shows the dashboard for a specific device. ovos.phal.plugin.homeassistant.change.dashboard (GUI bus) handle_show_device_dashboard ovos.phal.plugin.homeassistant.show.area.dashboard 'area': str Shows the dashboard for a specific area. ovos.phal.plugin.homeassistant.change.dashboard (GUI bus) handle_show_area_dashboard ovos.phal.plugin.homeassistant.update.device.dashboard 'device_type': str Updates the dashboard for a specific device. ovos.phal.plugin.homeassistant.update.device.dashboard handle_update_device_dashboard ovos.phal.plugin.homeassistant.update.area.dashboard 'area_type': str Updates the dashboard for a specific area. N/A handle_update_area_dashboard ovos.phal.plugin.homeassistant.set.group.display.settings 'use_group_display': bool Sets the group display settings. N/A handle_set_group_display_settings ovos.phal.plugin.homeassistant.setup.instance 'url': str 'api_key': str 'assist_only': bool Sets up a new Home Assistant instance. ovos-PHAL-plugin-homeassistant.home setup_configuration configuration.updated See ovos.phal.plugin.homeassistant.setup.instance Responds to changes to configuration by re-initializing HA See ovos.phal.plugin.homeassistant.setup.instance init_configuration configuration.patch See ovos.phal.plugin.homeassistant.setup.instance Responds to changes to configuration by re-initializing HA See ovos.phal.plugin.homeassistant.setup.instance init_configuration","title":"Listens to"},{"location":"phal_ha/#emits","text":"Emits all of the messages that it listens to, plus the following: Message Type Message Data Description Trigger Message Type Handled by ovos.phal.plugin.homeassistant.ready Signals that the Home Assistant plugin is ready. ovos.phal.plugin.homeassistant.setup.instance init_configuration ovos.phal.plugin.homeassistant.device.updated 'device_id': str Signals that a device has been updated, requesting a new display model. ovos.phal.plugin.homeassistant.device.state.updated device_updated oauth.get.app.host.info Requests host information for OAuth registration. oauth.get.app.host.info.response request_host_info_from_oauth oauth.generate.qr.request 'app_id': str 'skill_id': str Requests QR code for OAuth registration. oauth.generate.qr.response start_oauth_flow oauth.token.response.munged_id 'access_token': str Receives the OAuth token response. handle_token_oauth_response","title":"Emits"},{"location":"phal_ipgeo/","text":"PHAL IP Geolocation Listens to Message Type Message Data Description Emitted Response Type Handled by mycroft.internet.connected Triggers a reset of the IP geolocation with the existing location taking precedence if available. configuration.updated ovos.ipgeo.update.response on_reset ovos.ipgeo.update \"overwrite\": bool Triggers a reset of the IP geolocation with an option to overwrite existing location. If 'overwrite' is False and an existing location is available, it takes precedence. configuration.updated ovos.ipgeo.update.response on_reset Emits Message Type Message Data Description Emitted by configuration.updated Signals that the configuration has been updated, typically after a successful IP geolocation. on_reset ovos.ipgeo.update.response \"error\": str \"location\": dict IP geolocation data ovos.ipgeo.update","title":"PHAL IP Geolocation"},{"location":"phal_ipgeo/#phal-ip-geolocation","text":"","title":"PHAL IP Geolocation"},{"location":"phal_ipgeo/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled by mycroft.internet.connected Triggers a reset of the IP geolocation with the existing location taking precedence if available. configuration.updated ovos.ipgeo.update.response on_reset ovos.ipgeo.update \"overwrite\": bool Triggers a reset of the IP geolocation with an option to overwrite existing location. If 'overwrite' is False and an existing location is available, it takes precedence. configuration.updated ovos.ipgeo.update.response on_reset","title":"Listens to"},{"location":"phal_ipgeo/#emits","text":"Message Type Message Data Description Emitted by configuration.updated Signals that the configuration has been updated, typically after a successful IP geolocation. on_reset ovos.ipgeo.update.response \"error\": str \"location\": dict IP geolocation data ovos.ipgeo.update","title":"Emits"},{"location":"phal_mk1/","text":"PHAL Mark1 Faceplate Listens to Also see the PHAL plugin base class for default events handled by mk1 faceplate Message Type Message Data Description Handled by system.factory.reset.ping Report that we can factory reset mk1 faceplate handle_register_factory_reset_handler system.factory.reset.phal Perform faceplate factory reset handle_factory_reset mycroft.internet.connected Show no-internet icon on_display_reset mycroft.stop Clear faceplate on_display_reset ovos.common_play.play Show music icon on_music ovos.common_play.stop Clear music icon on_display_reset mycroft.audio.service.play Show music icon on_music mycroft.audio.service.stop Clear music icon on_display_reset enclosure.eyes.on Illuminate or show the eyes. on_eyes_on enclosure.eyes.off Turn off or hide the eyes. on_eyes_off enclosure.eyes.fill \"percentage\": int Triggered to fill a percentage of the eyes. on_eyes_fill enclosure.eyes.blink \"side\": str Make the eyes blink. on_eyes_blink enclosure.eyes.narrow Make the eyes look narrow, like a squint. on_eyes_narrow enclosure.eyes.look \"side\": str Make the eyes look to the given side. on_eyes_look enclosure.eyes.color \"r\": int \"g\": int \"b\": int Change the eye color to the given RGB color. on_eyes_color enclosure.eyes.brightness \"level\": int Set the brightness of the eyes in the display. on_eyes_brightness enclosure.eyes.reset Restore the eyes to their default (ready) state. on_eyes_reset enclosure.eyes.timedspin \"length\": int Make the eyes 'roll' for the given time. on_eyes_timed_spin enclosure.eyes.volume \"volume\": int Indicate the volume using the eyes. on_eyes_volume enclosure.eyes.spin Make the eyes 'spin'. on_eyes_spin enclosure.eyes.set_pixel \"idx\": int \"r\": int \"g\": int \"b\": int Set the color of a specific eye pixel. on_eyes_set_pixel enclosure.mouth.reset Restore the mouth display to normal (blank). on_display_reset enclosure.mouth.talk Show a generic 'talking' animation for non-synched speech. on_talk enclosure.mouth.think Show a 'thinking' image or animation. on_think enclosure.mouth.listen Show a 'listening' image or animation. on_listen enclosure.mouth.smile Show a 'smile' image or animation. on_smile enclosure.mouth.viseme \"code\": int Display a viseme mouth shape for synced speech. on_viseme enclosure.mouth.viseme_list \"start\": int \"visemes\": [(int, int)] Send mouth visemes as a list in a single message. on_viseme_list enclosure.mouth.text \"text\": str Display text (scrolling as needed). on_text enclosure.mouth.display \"img_code\": str \"xOffset\": int \"yOffset\": int \"clearPrev\": bool Display images on faceplate. on_display enclosure.weather.display \"img_code\": char \"temp\": int Show the temperature and a weather icon. on_weather_display Emits Message Type Message Data Description Handled by system.factory.reset.register \"skill_id\": \"ovos-phal-plugin-mk1\" Register the factory reset handler in the system. handle_register_factory_reset_handler","title":"PHAL Mark1 Faceplate"},{"location":"phal_mk1/#phal-mark1-faceplate","text":"","title":"PHAL Mark1 Faceplate"},{"location":"phal_mk1/#listens-to","text":"Also see the PHAL plugin base class for default events handled by mk1 faceplate Message Type Message Data Description Handled by system.factory.reset.ping Report that we can factory reset mk1 faceplate handle_register_factory_reset_handler system.factory.reset.phal Perform faceplate factory reset handle_factory_reset mycroft.internet.connected Show no-internet icon on_display_reset mycroft.stop Clear faceplate on_display_reset ovos.common_play.play Show music icon on_music ovos.common_play.stop Clear music icon on_display_reset mycroft.audio.service.play Show music icon on_music mycroft.audio.service.stop Clear music icon on_display_reset enclosure.eyes.on Illuminate or show the eyes. on_eyes_on enclosure.eyes.off Turn off or hide the eyes. on_eyes_off enclosure.eyes.fill \"percentage\": int Triggered to fill a percentage of the eyes. on_eyes_fill enclosure.eyes.blink \"side\": str Make the eyes blink. on_eyes_blink enclosure.eyes.narrow Make the eyes look narrow, like a squint. on_eyes_narrow enclosure.eyes.look \"side\": str Make the eyes look to the given side. on_eyes_look enclosure.eyes.color \"r\": int \"g\": int \"b\": int Change the eye color to the given RGB color. on_eyes_color enclosure.eyes.brightness \"level\": int Set the brightness of the eyes in the display. on_eyes_brightness enclosure.eyes.reset Restore the eyes to their default (ready) state. on_eyes_reset enclosure.eyes.timedspin \"length\": int Make the eyes 'roll' for the given time. on_eyes_timed_spin enclosure.eyes.volume \"volume\": int Indicate the volume using the eyes. on_eyes_volume enclosure.eyes.spin Make the eyes 'spin'. on_eyes_spin enclosure.eyes.set_pixel \"idx\": int \"r\": int \"g\": int \"b\": int Set the color of a specific eye pixel. on_eyes_set_pixel enclosure.mouth.reset Restore the mouth display to normal (blank). on_display_reset enclosure.mouth.talk Show a generic 'talking' animation for non-synched speech. on_talk enclosure.mouth.think Show a 'thinking' image or animation. on_think enclosure.mouth.listen Show a 'listening' image or animation. on_listen enclosure.mouth.smile Show a 'smile' image or animation. on_smile enclosure.mouth.viseme \"code\": int Display a viseme mouth shape for synced speech. on_viseme enclosure.mouth.viseme_list \"start\": int \"visemes\": [(int, int)] Send mouth visemes as a list in a single message. on_viseme_list enclosure.mouth.text \"text\": str Display text (scrolling as needed). on_text enclosure.mouth.display \"img_code\": str \"xOffset\": int \"yOffset\": int \"clearPrev\": bool Display images on faceplate. on_display enclosure.weather.display \"img_code\": char \"temp\": int Show the temperature and a weather icon. on_weather_display","title":"Listens to"},{"location":"phal_mk1/#emits","text":"Message Type Message Data Description Handled by system.factory.reset.register \"skill_id\": \"ovos-phal-plugin-mk1\" Register the factory reset handler in the system. handle_register_factory_reset_handler","title":"Emits"},{"location":"phal_wallpaper/","text":"PHAL Wallpaper Manager Listens to Message Type Message Data Description Emitted Response Type Handled by ovos.wallpaper.manager.register.provider 'provider_name': str 'provider_display_name': str 'provider_configurable': bool Register a wallpaper provider with its name, display name, and configurability status. ovos.phal.wallpaper.manager.provider.registered handle_register_provider ovos.wallpaper.manager.get.registered.providers Get a list of registered wallpaper providers. handle_get_registered_providers ovos.wallpaper.manager.set.active.provider 'provider_name': str 'provider_image': str Set the active wallpaper provider and its optional image. handle_set_active_provider ovos.wallpaper.manager.get.active.provider Get the currently active wallpaper provider. handle_get_active_provider ovos.wallpaper.manager.setup.default.provider 'provider_name': str 'default_wallpaper_name': str Set up the default wallpaper provider if none is selected. handle_setup_default_provider ovos.wallpaper.manager.collect.collection.response 'provider_name': str 'wallpaper_collection': list Collect the wallpaper collection from a provider. handle_wallpaper_collection ovos.wallpaper.manager.get.collection Get the current wallpaper collection. get_wallpaper_collection ovos.wallpaper.manager.get.collection.from.provider 'provider_name': str Get the wallpaper collection from a specific provider. get_wallpaper_collection_from_provider ovos.wallpaper.manager.update.collection Update the wallpaper collection from a provider. collect_wallpapers_from_provider ovos.wallpaper.manager.set.wallpaper 'url': str Set the wallpaper using the provided URL. handle_set_wallpaper ovos.wallpaper.manager.get.wallpaper Get the URL of the currently set wallpaper. handle_get_wallpaper ovos.wallpaper.manager.change.wallpaper Change the wallpaper to the next in the collection or request a new one. handle_change_wallpaper ovos.wallpaper.manager.enable.auto.rotation 'rotation_time': int Enable automatic wallpaper rotation with the specified time interval. ovos.wallpaper.manager.auto.rotation.enabled handle_enable_auto_rotation ovos.wallpaper.manager.disable.auto.rotation Disable automatic wallpaper rotation. ovos.wallpaper.manager.auto.rotation.disabled handle_disable_auto_rotation ovos.wallpaper.manager.get.auto.rotation Get the status and rotation time of automatic wallpaper rotation. handle_get_auto_rotation ovos.wallpaper.manager.get.provider.config 'provider_name': str Get the configuration options from a specific provider. handle_get_provider_config Emits Message Type Message Data Description Trigger Message Type / Emitted by ovos.phal.wallpaper.manager.provider.registered Notify that a wallpaper provider has been successfully registered. ovos.wallpaper.manager.get.provider.config.response 'provider_name': str 'config': dict Response to a request for the configuration options from a provider. ovos.wallpaper.manager.auto.rotation.enabled ovos.wallpaper.manager.enable.auto.rotation ovos.wallpaper.manager.auto.rotation.disabled ovos.wallpaper.manager.disable.auto.rotation ovos.wallpaper.manager.loaded report load status on load","title":"PHAL Wallpaper Manager"},{"location":"phal_wallpaper/#phal-wallpaper-manager","text":"","title":"PHAL Wallpaper Manager"},{"location":"phal_wallpaper/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled by ovos.wallpaper.manager.register.provider 'provider_name': str 'provider_display_name': str 'provider_configurable': bool Register a wallpaper provider with its name, display name, and configurability status. ovos.phal.wallpaper.manager.provider.registered handle_register_provider ovos.wallpaper.manager.get.registered.providers Get a list of registered wallpaper providers. handle_get_registered_providers ovos.wallpaper.manager.set.active.provider 'provider_name': str 'provider_image': str Set the active wallpaper provider and its optional image. handle_set_active_provider ovos.wallpaper.manager.get.active.provider Get the currently active wallpaper provider. handle_get_active_provider ovos.wallpaper.manager.setup.default.provider 'provider_name': str 'default_wallpaper_name': str Set up the default wallpaper provider if none is selected. handle_setup_default_provider ovos.wallpaper.manager.collect.collection.response 'provider_name': str 'wallpaper_collection': list Collect the wallpaper collection from a provider. handle_wallpaper_collection ovos.wallpaper.manager.get.collection Get the current wallpaper collection. get_wallpaper_collection ovos.wallpaper.manager.get.collection.from.provider 'provider_name': str Get the wallpaper collection from a specific provider. get_wallpaper_collection_from_provider ovos.wallpaper.manager.update.collection Update the wallpaper collection from a provider. collect_wallpapers_from_provider ovos.wallpaper.manager.set.wallpaper 'url': str Set the wallpaper using the provided URL. handle_set_wallpaper ovos.wallpaper.manager.get.wallpaper Get the URL of the currently set wallpaper. handle_get_wallpaper ovos.wallpaper.manager.change.wallpaper Change the wallpaper to the next in the collection or request a new one. handle_change_wallpaper ovos.wallpaper.manager.enable.auto.rotation 'rotation_time': int Enable automatic wallpaper rotation with the specified time interval. ovos.wallpaper.manager.auto.rotation.enabled handle_enable_auto_rotation ovos.wallpaper.manager.disable.auto.rotation Disable automatic wallpaper rotation. ovos.wallpaper.manager.auto.rotation.disabled handle_disable_auto_rotation ovos.wallpaper.manager.get.auto.rotation Get the status and rotation time of automatic wallpaper rotation. handle_get_auto_rotation ovos.wallpaper.manager.get.provider.config 'provider_name': str Get the configuration options from a specific provider. handle_get_provider_config","title":"Listens to"},{"location":"phal_wallpaper/#emits","text":"Message Type Message Data Description Trigger Message Type / Emitted by ovos.phal.wallpaper.manager.provider.registered Notify that a wallpaper provider has been successfully registered. ovos.wallpaper.manager.get.provider.config.response 'provider_name': str 'config': dict Response to a request for the configuration options from a provider. ovos.wallpaper.manager.auto.rotation.enabled ovos.wallpaper.manager.enable.auto.rotation ovos.wallpaper.manager.auto.rotation.disabled ovos.wallpaper.manager.disable.auto.rotation ovos.wallpaper.manager.loaded report load status on load","title":"Emits"},{"location":"phal_wifi_gui/","text":"WIFI GUI setup provides on device QML GUI for wifi setup Listens To Message Type Message Data Description Emitted Response Type Handled By ovos.phal.wifi.plugin.stop.setup.event Handles the stop setup event for the WIFI plugin handle_stop_setup ovos.phal.wifi.plugin.client.registered \"client\": str \"id\": str Handles the registration of a client with the WIFI plugin handle_registered ovos.phal.wifi.plugin.client.deregistered Handles the deregistration of a client with the WIFI plugin handle_deregistered ovos.phal.wifi.plugin.client.registration.failure \"error\": str Handles the failure of client registration with the WIFI plugin handle_registration_failure ovos.phal.wifi.plugin.alive Handles the alive event from the WIFI plugin register_client ovos.phal.nm.connection.successful Handles the successful connection event from the NM plugin display_success ovos.phal.nm.connection.failure \"errorCode\": str Handles the failure connection event from the NM plugin display_failure ovos.phal.gui.network.client.back Handles the back event in the GUI network client display_path_exit ovos.phal.gui.display.connected.network.settings \"connection_details\": dict Handles the display of connected network settings in the GUI display_connected_network_settings ovos.phal.gui.display.disconnected.network.settings \"connection_details\": dict Handles the display of disconnected network settings in the GUI display_disconnected_network_settings ovos.phal.gui.network.client.internal.back Handles the internal back event in the GUI network client display_internal_back system.display.homescreen Forcefully abort wifi setup GUI clean_shutdown mycroft.device.settings Forcefully abort wifi setup GUI clean_shutdown Emits Message Type Message Data Description Emitted By ovos.phal.wifi.plugin.register.client \"client\": \"ovos-PHAL-plugin-gui-network-client\" \"type\": \"onDevice\" \"display_text\": \"On Device Setup\" \"has_gui\": True \"requires_input\": True Registers the client with the WIFI plugin register_client ovos.phal.wifi.plugin.remove.active.client \"client\": \"ovos-PHAL-plugin-gui-network-client\" Requests removal of the active client from the WIFI plugin request_deactivate ovos.phal.wifi.plugin.user.activated Restart WiFi setup on failure. display_path_exit ovos.wifi.setup.completed Indicates that WiFi setup is completed successfully. display_success","title":"WIFI GUI"},{"location":"phal_wifi_gui/#wifi-gui-setup","text":"provides on device QML GUI for wifi setup","title":"WIFI GUI setup"},{"location":"phal_wifi_gui/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled By ovos.phal.wifi.plugin.stop.setup.event Handles the stop setup event for the WIFI plugin handle_stop_setup ovos.phal.wifi.plugin.client.registered \"client\": str \"id\": str Handles the registration of a client with the WIFI plugin handle_registered ovos.phal.wifi.plugin.client.deregistered Handles the deregistration of a client with the WIFI plugin handle_deregistered ovos.phal.wifi.plugin.client.registration.failure \"error\": str Handles the failure of client registration with the WIFI plugin handle_registration_failure ovos.phal.wifi.plugin.alive Handles the alive event from the WIFI plugin register_client ovos.phal.nm.connection.successful Handles the successful connection event from the NM plugin display_success ovos.phal.nm.connection.failure \"errorCode\": str Handles the failure connection event from the NM plugin display_failure ovos.phal.gui.network.client.back Handles the back event in the GUI network client display_path_exit ovos.phal.gui.display.connected.network.settings \"connection_details\": dict Handles the display of connected network settings in the GUI display_connected_network_settings ovos.phal.gui.display.disconnected.network.settings \"connection_details\": dict Handles the display of disconnected network settings in the GUI display_disconnected_network_settings ovos.phal.gui.network.client.internal.back Handles the internal back event in the GUI network client display_internal_back system.display.homescreen Forcefully abort wifi setup GUI clean_shutdown mycroft.device.settings Forcefully abort wifi setup GUI clean_shutdown","title":"Listens To"},{"location":"phal_wifi_gui/#emits","text":"Message Type Message Data Description Emitted By ovos.phal.wifi.plugin.register.client \"client\": \"ovos-PHAL-plugin-gui-network-client\" \"type\": \"onDevice\" \"display_text\": \"On Device Setup\" \"has_gui\": True \"requires_input\": True Registers the client with the WIFI plugin register_client ovos.phal.wifi.plugin.remove.active.client \"client\": \"ovos-PHAL-plugin-gui-network-client\" Requests removal of the active client from the WIFI plugin request_deactivate ovos.phal.wifi.plugin.user.activated Restart WiFi setup on failure. display_path_exit ovos.wifi.setup.completed Indicates that WiFi setup is completed successfully. display_success","title":"Emits"},{"location":"shell/","text":"OVOS Shell Companion Listens to Message Type Message Data Description Emitted Response Type Handled By mycroft.gui.screen.close Clears the namespace of the specified skill. handle_remove_namespace system.display.homescreen Handles the event to display the homescreen. handle_system_display_homescreen mycroft.device.settings Displays the device settings page. handle_device_settings ovos.phal.configuration.provider.get.response \"settingsMetaData\": Dict \"groupName\": str Displays advanced configuration for a group. display_advanced_config_for_group ovos.phal.configuration.provider.list.groups.response \"groups\": List Displays a list of advanced configuration groups. display_advanced_config_groups smartspeaker.extension.extend.about \"display_list\": List Extends the about page data. extend_about_page_data_from_event GUI events, sent via the gui protocol and appear in the bus with skill_id prepended, i.e. ovos_gui_plugin_shell_companion.{msg_type} In the GUI websocket these events look like this { \"type\": \"mycroft.events.triggered\", \"namespace\": \"ovos_gui_plugin_shell_companion\", \"event_name\": MSG_TYPE, \"data\": {} } GUI Message Type Message Data Description Emitted Response Type (in regular websocket) Handled By mycroft.device.settings.homescreen Displays homescreen settings page. handle_device_homescreen_settings mycroft.device.settings.ssh Displays SSH settings page. handle_device_ssh_settings mycroft.device.settings.developer Displays developer settings page. handle_device_developer_settings mycroft.device.show.idle Shows the homescreen. handle_show_homescreen mycroft.device.settings.customize Displays customize settings page. handle_device_customize_settings mycroft.device.settings.create.theme Displays create theme settings page. handle_device_create_theme mycroft.device.settings.about.page Displays about page settings. handle_device_about_page mycroft.device.settings.display Displays display settings page. handle_device_display_settings mycroft.device.settings.factory Displays factory settings page. handle_device_display_factory speaker.extension.display.set.wallpaper.rotation \"wallpaper_rotation\": bool Handles setting wallpaper rotation configuration. speaker.extension.display.wallpaper.rotation.changed handle_display_wallpaper_rotation_config_set speaker.extension.display.set.auto.dim \"auto_dim\": bool Handles setting auto dim configuration. speaker.extension.display.auto.dim.changed handle_display_auto_dim_config_set speaker.extension.display.set.auto.nightmode \"auto_nightmode\": bool Handles setting auto night mode configuration. speaker.extension.display.auto.nightmode.changed handle_display_auto_nightmode_config_set Emits Message Type Message Data Description Trigger Message Type Handled By gui.clear.namespace \"__from\": str Clears the namespace of the specified skill. mycroft.gui.screen.close handle_remove_namespace speaker.extension.display.wallpaper.rotation.changed Notifies that the wallpaper rotation configuration has changed. {namespace}.speaker.extension.display.set.wallpaper.rotation handle_display_wallpaper_rotation_config_set speaker.extension.display.auto.dim.changed Notifies that the auto dim configuration has changed. {namespace}.speaker.extension.display.set.auto.dim handle_display_auto_dim_config_set speaker.extension.display.auto.nightmode.changed Notifies that the auto night mode configuration has changed. {namespace}.speaker.extension.display.set.auto.nightmode handle_display_auto_nightmode_config_set","title":"OVOS Shell"},{"location":"shell/#ovos-shell-companion","text":"","title":"OVOS Shell Companion"},{"location":"shell/#listens-to","text":"Message Type Message Data Description Emitted Response Type Handled By mycroft.gui.screen.close Clears the namespace of the specified skill. handle_remove_namespace system.display.homescreen Handles the event to display the homescreen. handle_system_display_homescreen mycroft.device.settings Displays the device settings page. handle_device_settings ovos.phal.configuration.provider.get.response \"settingsMetaData\": Dict \"groupName\": str Displays advanced configuration for a group. display_advanced_config_for_group ovos.phal.configuration.provider.list.groups.response \"groups\": List Displays a list of advanced configuration groups. display_advanced_config_groups smartspeaker.extension.extend.about \"display_list\": List Extends the about page data. extend_about_page_data_from_event GUI events, sent via the gui protocol and appear in the bus with skill_id prepended, i.e. ovos_gui_plugin_shell_companion.{msg_type} In the GUI websocket these events look like this { \"type\": \"mycroft.events.triggered\", \"namespace\": \"ovos_gui_plugin_shell_companion\", \"event_name\": MSG_TYPE, \"data\": {} } GUI Message Type Message Data Description Emitted Response Type (in regular websocket) Handled By mycroft.device.settings.homescreen Displays homescreen settings page. handle_device_homescreen_settings mycroft.device.settings.ssh Displays SSH settings page. handle_device_ssh_settings mycroft.device.settings.developer Displays developer settings page. handle_device_developer_settings mycroft.device.show.idle Shows the homescreen. handle_show_homescreen mycroft.device.settings.customize Displays customize settings page. handle_device_customize_settings mycroft.device.settings.create.theme Displays create theme settings page. handle_device_create_theme mycroft.device.settings.about.page Displays about page settings. handle_device_about_page mycroft.device.settings.display Displays display settings page. handle_device_display_settings mycroft.device.settings.factory Displays factory settings page. handle_device_display_factory speaker.extension.display.set.wallpaper.rotation \"wallpaper_rotation\": bool Handles setting wallpaper rotation configuration. speaker.extension.display.wallpaper.rotation.changed handle_display_wallpaper_rotation_config_set speaker.extension.display.set.auto.dim \"auto_dim\": bool Handles setting auto dim configuration. speaker.extension.display.auto.dim.changed handle_display_auto_dim_config_set speaker.extension.display.set.auto.nightmode \"auto_nightmode\": bool Handles setting auto night mode configuration. speaker.extension.display.auto.nightmode.changed handle_display_auto_nightmode_config_set","title":"Listens to"},{"location":"shell/#emits","text":"Message Type Message Data Description Trigger Message Type Handled By gui.clear.namespace \"__from\": str Clears the namespace of the specified skill. mycroft.gui.screen.close handle_remove_namespace speaker.extension.display.wallpaper.rotation.changed Notifies that the wallpaper rotation configuration has changed. {namespace}.speaker.extension.display.set.wallpaper.rotation handle_display_wallpaper_rotation_config_set speaker.extension.display.auto.dim.changed Notifies that the auto dim configuration has changed. {namespace}.speaker.extension.display.set.auto.dim handle_display_auto_dim_config_set speaker.extension.display.auto.nightmode.changed Notifies that the auto night mode configuration has changed. {namespace}.speaker.extension.display.set.auto.nightmode handle_display_auto_nightmode_config_set","title":"Emits"},{"location":"skills/","text":"ovos-workshop OVOSSkill FallbackSkill OVOSCommonPlaybackSkill CommonQuerySkill IdleDisplaySkill SkillLoader OVOSSkill Listens to Message Type Message Data Description Emits response handled by mycroft.stop The skill stops everything it is doing mycroft.stop.handled self.stop {self.skill_id}.converse.ping Informs ConverseService if the skill supports converse . skill.converse.pong self._handle_converse_ack {self.skill_id}.converse.request 'utterances': List 'lang': str Handles user input with the converse method if skill is active skill.converse.response self.converse {self.skill_id}.activate Callback when the skill is considered active by the intent service. self.handle_activate {self.skill_id}.deactivate Callback when the skill is no longer considered active by the intent service. self.handle_deactivate intent.service.skills.deactivated 'skill_id': str Intent service deactivated a skill. {self.skill_id}.deactivate self._handle_skill_deactivated intent.service.skills.activated 'skill_id': str Intent service activated a skill. {self.skill_id}.activate self._handle_skill_activated mycroft.skill.enable_intent 'intent_name': str Re-registers a disabled intent (intent_name contains munged skill_id) self.handle_enable_intent mycroft.skill.disable_intent 'intent_name': str Disables a registered intent (intent_name contains munged skill_id) self.handle_disable_intent mycroft.skill.set_cross_context 'context': str 'word': str 'origin': str Sets a skill specific context (with munged skill_id) self.handle_set_cross_context mycroft.skill.remove_cross_context 'context': str removes skill specific context (with munged skill_id) self.handle_remove_cross_context mycroft.skills.settings.changed 'skill_id': Dict Update settings if a remote settings change applies to this skill. self.handle_settings_change {self.skill_id}.public_api Responds with the skill's public API. {self.skill_id}.public_api.response self._send_public_api {self.skill_id}.converse.get_response 'utterances': List 'lang': str communicates user response ( get_response ) to the skill self.get_response mycroft.skills.abort_question Force self.get_response to return None immediately self.get_response mycroft.mark2.collect_idle DEPRECATED: responds to ovos-gui letting it know skill provides a homescreen mycroft.mark2.register_idle self._handle_collect_resting {self.skill_id}.idle DEPRECATED: callback to trigger homescreen provided by this skill @resting_handler decorator Emits Message Type Message Data Description In Response to / sent by {self.skill_id}.activate Emits a message to activate the skill. intent.service.skills.activated {self.skill_id}.deactivate Emits a message to deactivate the skill. intent.service.skills.deactivated intent.service.skills.activate 'skill_id': str Marks the skill as active and pushes it to the top of the active skills list. self._activate intent.service.skills.deactivate 'skill_id': str Marks the skill as inactive and removes it from the active skills list. self._deactivate skill.converse.pong 'skill_id': str 'can_handle': bool Informs the skills service whether the skill can handle converse . skill.converse.ping skill.converse.response 'skill_id': str 'result': bool Responds to a skill.converse.request with the result of converse . skill.converse.request skill.converse.get_response.enable \"skill_id\": str Enables getting a response from the user during a conversation. self.get_response skill.converse.get_response.disable \"skill_id\": str Disables getting a response from the user during a conversation. self.get_response mycroft.mic.listen Triggers listening for user input. self.speak + self.get_response mycroft.skill.set_cross_context 'context': str 'word': str 'origin': str Emits a message to set cross-context data. self.set_cross_skill_context mycroft.skill.remove_cross_context 'context': str` Emits a message to remove cross-context data. self.remove_cross_skill_context speak \"utterance\": str \"expect_response\": bool \"meta\": Dict \"lang\": self.lang Initiates speech synthesis to speak the provided utterance. self.speak detach_skill \"skill_id\": str Tell IntentService to remove all intents from this skill self.default_shutdown {self.skill_id}.public_api.response '{method_name}': {'help': str, 'type': str, 'func': str} Reports skill api data {self.skill_id}.public_api mycroft.audio.queue \"uri\": str Queue an audio file for playback. self.play_audio mycroft.audio.play_sound \"uri\": str \"instant\": bool Play an audio file self.play_audio mycroft.stop Stop everything skills are doing self.send_stop_signal mycroft.audio.speech.stop Stop the speech synthesis process. self.send_stop_signal recognizer_loop:record_stop Instruct ovos-listener to stop recording. self.send_stop_signal mycroft.mic.mute DEPRECATED: (classic core only) Mute the microphone, possibly used to stop recording during speech recognition. self.send_stop_signal mycroft.mic.unmute DEPRECATED: (classic core only) Unmute the microphone. self.send_stop_signal mycroft.mark2.register_idle \"name\": self.resting_name \"id\": str DEPRECATED: Registers a resting screen for the skill. mycroft.mark2.collect_idle active_skill_request 'skill_id': str DEPRECATED: (classic core only) same as intent.service.skills.activate self._activate FallbackSkill Listens to Message Type Message Data Description Response Type(s) handled by ovos.skills.fallback.ping \"utterances\": List \"lang\": str Informs the skills service that the FallbackSkill can handle fallbacks. ovos.skills.fallback.pong self._handle_fallback_ack ovos.skills.fallback.skill_id Handles a fallback request, calling registered handlers in priority order until one is successful. ovos.skills.fallback.skill_id.start , ovos.skills.fallback.skill_id.response @fallback_handler decorator / self.register_fallback Emits Message Type Message Data Description In Response to ovos.skills.fallback.register \"skill_id\": str \"priority\": int Registers the FallbackSkill with the skills service, specifying its skill ID and priority. self._register_system_event_handlers ovos.skills.fallback.pong \"skill_id\": str \"can_handle\": bool Informs the skills service whether the FallbackSkill can handle fallbacks for a given set of utterances and language. ovos.skills.fallback.ping ovos.skills.fallback.deregister \"skill_id\": str` Deregisters the FallbackSkill with the skills service. self.default_shutdown ovos.skills.fallback.skill_id.start Indicates the start of the fallback handling process for a specific skill. ovos.skills.fallback.skill_id.request ovos.skills.fallback.skill_id.response \"result\": bool \"fallback_handler\": str Indicates the result of the fallback handling process for a specific skill, including whether it was successful and the name of the fallback handler. ovos.skills.fallback.skill_id.request OVOSCommonPlaybackSkill Listens To Message Type Message Data Description Response Type(s) handled by ovos.common_play.query \"phrase\": str \"question_type\": str Query skill if it can start playback from the given phrase. ovos.common_play.skill.search_start , ovos.common_play.skill.search_end @ocp_search decorator ovos.common_play.featured_tracks.play \"skill_id\": str Play featured tracks from a skill with the specified skill_id. @ocp_featured_media decorator ovos.common_play.skills.get Request information about the skills that support common playback. ovos.common_play.announce self.__handle_ocp_skills_get ovos.common_play.{self.skill_id}.play Handle the playback of media. ovos.common_play.player.state @ocp_play decorator ovos.common_play.{self.skill_id}.pause Handle the pause of media playback. ovos.common_play.player.state @ocp_pause decorator ovos.common_play.{self.skill_id}.resume Handle the resume of media playback. ovos.common_play.player.state @ocp_resume decorator ovos.common_play.{self.skill_id}.next Handle the request to play the next track. @ocp_next decorator ovos.common_play.{self.skill_id}.previous Handle the request to play the previous track. @ocp_previous decorator ovos.common_play.{self.skill_id}.stop Handle the stop of media playback. ovos.common_play.player.state self.stop ovos.common_play.search.stop Stop a media search. self.__handle_stop_search mycroft.stop Stop a media search in response to a global stop self.__handle_stop_search Emits Message Type Message Data Description In Response to ovos.common_play.announce \"skill_id\": str \"skill_name\": str \"thumbnail\": str \"media_types\": List \"featured_tracks\": bool Announce skill information to the common playback framework. ovos.common_play.skills.get ovos.common_play.skill.search_start \"skill_id\": str \"skill_name\": str \"thumbnail\": str Signal the start of a media search initiated by the skill. ovos.common_play.query ovos.common_play.query.response \"phrase\": str \"skill_id\": str \"skill_name\": str \"thumbnail\": str \"results\": List \"searching\": bool Respond to a media search query with search results. ovos.common_play.query ovos.common_play.skill.search_end \"skill_id\": str Signal the end of a media search initiated by the skill. ovos.common_play.query ovos.common_play.player.state \"state\": str Signal changes in the media player state (e.g., playing, paused, stopped). ovos.common_play.{self.skill_id}.play ovos.common_play.{self.skill_id}.pause ovos.common_play.{self.skill_id}.resume ovos.common_play.{self.skill_id}.stop CommonQuerySkill Listens to Message Type Message Data Description Response Type(s) Handled by question:query \"phrase\": str Handles incoming user queries and attempts to answer them. question:query.response self.CQS_match_query_phrase question:action \"phrase\": str \"callback_data\": Dict Skill selected to answer question callback self.CQS_action Emits Message Type Message Data Description In Response to question:query.response \"phrase\": str \"skill_id\": str \"answer\": str \"callback_data\": Dict \"conf\": float Report id the skill can answer the user query. question:query IdleDisplaySkill Listens to Message Type Message Data Description Response Type(s) handled by mycroft.ready Shows idle screen when the device is ready for use. skill.idle.displayed self.handle_idle homescreen.manager.activate.display \"homescreen_id\": str Display this home screen if requested by the Home Screen Manager. skill.idle.displayed self.handle_idle homescreen.manager.reload.list Reloads this skill's homescreen entry and sends it to the Home Screen Manager. self._reload_homescreen_entry mycroft.skills.shutdown \"id\": str Removes this homescreen from the Home Screen Manager if requested. self._remove_homescreen_on_shutdown Emits Message Type Message Data Description In Response to skill.idle.displayed Indicates that the idle display is shown. homescreen.manager.activate.display homescreen.manager.add \"class\": str \"name\": str \"id\": str Registers this skill's homescreen entry with the Home Screen Manager. self._register_system_event_handlers homescreen.manager.remove \"class\": str \"name\": str \"id\": str Removes this skill's homescreen entry from the Home Screen Manager. mycroft.skills.shutdown homescreen.manager.reload.list Requests a reload of this skill's homescreen entry. self._register_system_event_handlers SkillLoader Listens to Message Type Message Data Description mycroft.ready Event indicating that OVOS is ready. Emits Message Type Message Data Description mycroft.skills.is_ready \"status\": bool Checks if the skills service is ready. mycroft.skills.loaded \"path\": str \"id\": str \"name\": str Indicates that a skill has been successfully loaded. mycroft.skills.loading_failure \"path\": str \"id\": str Indicates that a skill failed to load. mycroft.skills.shutdown \"path\": str \"id\": str Notifies that a skill is being shutdown.","title":"Workshop"},{"location":"skills/#ovos-workshop","text":"OVOSSkill FallbackSkill OVOSCommonPlaybackSkill CommonQuerySkill IdleDisplaySkill SkillLoader","title":"ovos-workshop"},{"location":"skills/#ovosskill","text":"","title":"OVOSSkill"},{"location":"skills/#listens-to","text":"Message Type Message Data Description Emits response handled by mycroft.stop The skill stops everything it is doing mycroft.stop.handled self.stop {self.skill_id}.converse.ping Informs ConverseService if the skill supports converse . skill.converse.pong self._handle_converse_ack {self.skill_id}.converse.request 'utterances': List 'lang': str Handles user input with the converse method if skill is active skill.converse.response self.converse {self.skill_id}.activate Callback when the skill is considered active by the intent service. self.handle_activate {self.skill_id}.deactivate Callback when the skill is no longer considered active by the intent service. self.handle_deactivate intent.service.skills.deactivated 'skill_id': str Intent service deactivated a skill. {self.skill_id}.deactivate self._handle_skill_deactivated intent.service.skills.activated 'skill_id': str Intent service activated a skill. {self.skill_id}.activate self._handle_skill_activated mycroft.skill.enable_intent 'intent_name': str Re-registers a disabled intent (intent_name contains munged skill_id) self.handle_enable_intent mycroft.skill.disable_intent 'intent_name': str Disables a registered intent (intent_name contains munged skill_id) self.handle_disable_intent mycroft.skill.set_cross_context 'context': str 'word': str 'origin': str Sets a skill specific context (with munged skill_id) self.handle_set_cross_context mycroft.skill.remove_cross_context 'context': str removes skill specific context (with munged skill_id) self.handle_remove_cross_context mycroft.skills.settings.changed 'skill_id': Dict Update settings if a remote settings change applies to this skill. self.handle_settings_change {self.skill_id}.public_api Responds with the skill's public API. {self.skill_id}.public_api.response self._send_public_api {self.skill_id}.converse.get_response 'utterances': List 'lang': str communicates user response ( get_response ) to the skill self.get_response mycroft.skills.abort_question Force self.get_response to return None immediately self.get_response mycroft.mark2.collect_idle DEPRECATED: responds to ovos-gui letting it know skill provides a homescreen mycroft.mark2.register_idle self._handle_collect_resting {self.skill_id}.idle DEPRECATED: callback to trigger homescreen provided by this skill @resting_handler decorator","title":"Listens to"},{"location":"skills/#emits","text":"Message Type Message Data Description In Response to / sent by {self.skill_id}.activate Emits a message to activate the skill. intent.service.skills.activated {self.skill_id}.deactivate Emits a message to deactivate the skill. intent.service.skills.deactivated intent.service.skills.activate 'skill_id': str Marks the skill as active and pushes it to the top of the active skills list. self._activate intent.service.skills.deactivate 'skill_id': str Marks the skill as inactive and removes it from the active skills list. self._deactivate skill.converse.pong 'skill_id': str 'can_handle': bool Informs the skills service whether the skill can handle converse . skill.converse.ping skill.converse.response 'skill_id': str 'result': bool Responds to a skill.converse.request with the result of converse . skill.converse.request skill.converse.get_response.enable \"skill_id\": str Enables getting a response from the user during a conversation. self.get_response skill.converse.get_response.disable \"skill_id\": str Disables getting a response from the user during a conversation. self.get_response mycroft.mic.listen Triggers listening for user input. self.speak + self.get_response mycroft.skill.set_cross_context 'context': str 'word': str 'origin': str Emits a message to set cross-context data. self.set_cross_skill_context mycroft.skill.remove_cross_context 'context': str` Emits a message to remove cross-context data. self.remove_cross_skill_context speak \"utterance\": str \"expect_response\": bool \"meta\": Dict \"lang\": self.lang Initiates speech synthesis to speak the provided utterance. self.speak detach_skill \"skill_id\": str Tell IntentService to remove all intents from this skill self.default_shutdown {self.skill_id}.public_api.response '{method_name}': {'help': str, 'type': str, 'func': str} Reports skill api data {self.skill_id}.public_api mycroft.audio.queue \"uri\": str Queue an audio file for playback. self.play_audio mycroft.audio.play_sound \"uri\": str \"instant\": bool Play an audio file self.play_audio mycroft.stop Stop everything skills are doing self.send_stop_signal mycroft.audio.speech.stop Stop the speech synthesis process. self.send_stop_signal recognizer_loop:record_stop Instruct ovos-listener to stop recording. self.send_stop_signal mycroft.mic.mute DEPRECATED: (classic core only) Mute the microphone, possibly used to stop recording during speech recognition. self.send_stop_signal mycroft.mic.unmute DEPRECATED: (classic core only) Unmute the microphone. self.send_stop_signal mycroft.mark2.register_idle \"name\": self.resting_name \"id\": str DEPRECATED: Registers a resting screen for the skill. mycroft.mark2.collect_idle active_skill_request 'skill_id': str DEPRECATED: (classic core only) same as intent.service.skills.activate self._activate","title":"Emits"},{"location":"skills/#fallbackskill","text":"","title":"FallbackSkill"},{"location":"skills/#listens-to_1","text":"Message Type Message Data Description Response Type(s) handled by ovos.skills.fallback.ping \"utterances\": List \"lang\": str Informs the skills service that the FallbackSkill can handle fallbacks. ovos.skills.fallback.pong self._handle_fallback_ack ovos.skills.fallback.skill_id Handles a fallback request, calling registered handlers in priority order until one is successful. ovos.skills.fallback.skill_id.start , ovos.skills.fallback.skill_id.response @fallback_handler decorator / self.register_fallback","title":"Listens to"},{"location":"skills/#emits_1","text":"Message Type Message Data Description In Response to ovos.skills.fallback.register \"skill_id\": str \"priority\": int Registers the FallbackSkill with the skills service, specifying its skill ID and priority. self._register_system_event_handlers ovos.skills.fallback.pong \"skill_id\": str \"can_handle\": bool Informs the skills service whether the FallbackSkill can handle fallbacks for a given set of utterances and language. ovos.skills.fallback.ping ovos.skills.fallback.deregister \"skill_id\": str` Deregisters the FallbackSkill with the skills service. self.default_shutdown ovos.skills.fallback.skill_id.start Indicates the start of the fallback handling process for a specific skill. ovos.skills.fallback.skill_id.request ovos.skills.fallback.skill_id.response \"result\": bool \"fallback_handler\": str Indicates the result of the fallback handling process for a specific skill, including whether it was successful and the name of the fallback handler. ovos.skills.fallback.skill_id.request","title":"Emits"},{"location":"skills/#ovoscommonplaybackskill","text":"","title":"OVOSCommonPlaybackSkill"},{"location":"skills/#listens-to_2","text":"Message Type Message Data Description Response Type(s) handled by ovos.common_play.query \"phrase\": str \"question_type\": str Query skill if it can start playback from the given phrase. ovos.common_play.skill.search_start , ovos.common_play.skill.search_end @ocp_search decorator ovos.common_play.featured_tracks.play \"skill_id\": str Play featured tracks from a skill with the specified skill_id. @ocp_featured_media decorator ovos.common_play.skills.get Request information about the skills that support common playback. ovos.common_play.announce self.__handle_ocp_skills_get ovos.common_play.{self.skill_id}.play Handle the playback of media. ovos.common_play.player.state @ocp_play decorator ovos.common_play.{self.skill_id}.pause Handle the pause of media playback. ovos.common_play.player.state @ocp_pause decorator ovos.common_play.{self.skill_id}.resume Handle the resume of media playback. ovos.common_play.player.state @ocp_resume decorator ovos.common_play.{self.skill_id}.next Handle the request to play the next track. @ocp_next decorator ovos.common_play.{self.skill_id}.previous Handle the request to play the previous track. @ocp_previous decorator ovos.common_play.{self.skill_id}.stop Handle the stop of media playback. ovos.common_play.player.state self.stop ovos.common_play.search.stop Stop a media search. self.__handle_stop_search mycroft.stop Stop a media search in response to a global stop self.__handle_stop_search","title":"Listens To"},{"location":"skills/#emits_2","text":"Message Type Message Data Description In Response to ovos.common_play.announce \"skill_id\": str \"skill_name\": str \"thumbnail\": str \"media_types\": List \"featured_tracks\": bool Announce skill information to the common playback framework. ovos.common_play.skills.get ovos.common_play.skill.search_start \"skill_id\": str \"skill_name\": str \"thumbnail\": str Signal the start of a media search initiated by the skill. ovos.common_play.query ovos.common_play.query.response \"phrase\": str \"skill_id\": str \"skill_name\": str \"thumbnail\": str \"results\": List \"searching\": bool Respond to a media search query with search results. ovos.common_play.query ovos.common_play.skill.search_end \"skill_id\": str Signal the end of a media search initiated by the skill. ovos.common_play.query ovos.common_play.player.state \"state\": str Signal changes in the media player state (e.g., playing, paused, stopped). ovos.common_play.{self.skill_id}.play ovos.common_play.{self.skill_id}.pause ovos.common_play.{self.skill_id}.resume ovos.common_play.{self.skill_id}.stop","title":"Emits"},{"location":"skills/#commonqueryskill","text":"","title":"CommonQuerySkill"},{"location":"skills/#listens-to_3","text":"Message Type Message Data Description Response Type(s) Handled by question:query \"phrase\": str Handles incoming user queries and attempts to answer them. question:query.response self.CQS_match_query_phrase question:action \"phrase\": str \"callback_data\": Dict Skill selected to answer question callback self.CQS_action","title":"Listens to"},{"location":"skills/#emits_3","text":"Message Type Message Data Description In Response to question:query.response \"phrase\": str \"skill_id\": str \"answer\": str \"callback_data\": Dict \"conf\": float Report id the skill can answer the user query. question:query","title":"Emits"},{"location":"skills/#idledisplayskill","text":"","title":"IdleDisplaySkill"},{"location":"skills/#listens-to_4","text":"Message Type Message Data Description Response Type(s) handled by mycroft.ready Shows idle screen when the device is ready for use. skill.idle.displayed self.handle_idle homescreen.manager.activate.display \"homescreen_id\": str Display this home screen if requested by the Home Screen Manager. skill.idle.displayed self.handle_idle homescreen.manager.reload.list Reloads this skill's homescreen entry and sends it to the Home Screen Manager. self._reload_homescreen_entry mycroft.skills.shutdown \"id\": str Removes this homescreen from the Home Screen Manager if requested. self._remove_homescreen_on_shutdown","title":"Listens to"},{"location":"skills/#emits_4","text":"Message Type Message Data Description In Response to skill.idle.displayed Indicates that the idle display is shown. homescreen.manager.activate.display homescreen.manager.add \"class\": str \"name\": str \"id\": str Registers this skill's homescreen entry with the Home Screen Manager. self._register_system_event_handlers homescreen.manager.remove \"class\": str \"name\": str \"id\": str Removes this skill's homescreen entry from the Home Screen Manager. mycroft.skills.shutdown homescreen.manager.reload.list Requests a reload of this skill's homescreen entry. self._register_system_event_handlers","title":"Emits"},{"location":"skills/#skillloader","text":"","title":"SkillLoader"},{"location":"skills/#listens-to_5","text":"Message Type Message Data Description mycroft.ready Event indicating that OVOS is ready.","title":"Listens to"},{"location":"skills/#emits_5","text":"Message Type Message Data Description mycroft.skills.is_ready \"status\": bool Checks if the skills service is ready. mycroft.skills.loaded \"path\": str \"id\": str \"name\": str Indicates that a skill has been successfully loaded. mycroft.skills.loading_failure \"path\": str \"id\": str Indicates that a skill failed to load. mycroft.skills.shutdown \"path\": str \"id\": str Notifies that a skill is being shutdown.","title":"Emits"}]}